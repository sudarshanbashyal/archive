[{"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx":"1","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts":"2","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx":"3","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx":"4","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx":"6","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx":"7","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx":"8","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx":"9","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx":"10","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx":"11","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx":"12","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx":"13","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx":"14","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx":"15","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx":"16","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx":"17","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx":"18","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx":"19","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx":"20","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx":"21","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx":"22","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx":"23","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts":"24","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts":"25","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts":"26","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx":"27","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts":"28","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx":"29","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts":"30","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts":"31","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts":"32","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts":"33","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx":"34"},{"size":646,"mtime":1612687051228,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1925,"mtime":1613304184173,"results":"38","hashOfConfig":"36"},{"size":1690,"mtime":1612789181126,"results":"39","hashOfConfig":"36"},{"size":2188,"mtime":1612708208381,"results":"40","hashOfConfig":"36"},{"size":1002,"mtime":1612770517474,"results":"41","hashOfConfig":"36"},{"size":1896,"mtime":1612779816302,"results":"42","hashOfConfig":"36"},{"size":2125,"mtime":1613305033267,"results":"43","hashOfConfig":"36"},{"size":1458,"mtime":1613305068939,"results":"44","hashOfConfig":"36"},{"size":1042,"mtime":1611647247923,"results":"45","hashOfConfig":"36"},{"size":4096,"mtime":1613391620356,"results":"46","hashOfConfig":"36"},{"size":782,"mtime":1613392137344,"results":"47","hashOfConfig":"36"},{"size":2052,"mtime":1613392782416,"results":"48","hashOfConfig":"36"},{"size":2488,"mtime":1611820111455,"results":"49","hashOfConfig":"36"},{"size":6549,"mtime":1613028338848,"results":"50","hashOfConfig":"36"},{"size":6287,"mtime":1613288770738,"results":"51","hashOfConfig":"36"},{"size":214,"mtime":1611833122235,"results":"52","hashOfConfig":"36"},{"size":941,"mtime":1613304253063,"results":"53","hashOfConfig":"36"},{"size":13096,"mtime":1613375018983,"results":"54","hashOfConfig":"36"},{"size":7156,"mtime":1613303841862,"results":"55","hashOfConfig":"36"},{"size":6743,"mtime":1613378613097,"results":"56","hashOfConfig":"36"},{"size":1955,"mtime":1613291409399,"results":"57","hashOfConfig":"36"},{"size":1808,"mtime":1612768345416,"results":"58","hashOfConfig":"36"},{"size":572,"mtime":1612706728128,"results":"59","hashOfConfig":"36"},{"size":2557,"mtime":1612959095195,"results":"60","hashOfConfig":"36"},{"size":2033,"mtime":1612959091749,"results":"61","hashOfConfig":"36"},{"size":2067,"mtime":1612707275282,"results":"62","hashOfConfig":"36"},{"size":4568,"mtime":1613288046429,"results":"63","hashOfConfig":"36"},{"size":1448,"mtime":1613303942382,"results":"64","hashOfConfig":"36"},{"size":1077,"mtime":1612706692485,"results":"65","hashOfConfig":"36"},{"size":554,"mtime":1612704922578,"results":"66","hashOfConfig":"36"},{"size":501,"mtime":1612772718647,"results":"67","hashOfConfig":"36"},{"size":708,"mtime":1613216937350,"results":"68","hashOfConfig":"36"},{"size":925,"mtime":1613304134419,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"2hvudg",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx",[],["150","151"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx",["152","153","154","155"],"import React, { useEffect, useState } from 'react';\nimport Home from './components/Home/Home';\nimport Landing from './components/Landing/Landing';\nimport ModalContainer from './components/Modal/ModalContainer';\nimport Navbar from './components/Navbar/Navbar';\nimport './index.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStore } from './redux/store';\nimport { refreshToken } from './redux/Actions/userActions';\nimport { ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [userLogged, setUserLogged] = useState(\n        localStorage.getItem('userLoggedIn')\n    );\n\n    // get user from the state\n    const userState = useSelector((state: RootStore) => state.client);\n\n    // get application state\n    const applicationState = useSelector(\n        (state: RootStore) => state.application\n    );\n\n    // request the backend for token with the cookie\n    useEffect(() => {\n        dispatch(refreshToken());\n    }, []);\n\n    //\n\n    return (\n        <div className=\"App\">\n            {/* Render Home page if the user is in the store */}\n            {userState.loading ? null : userState.client?.profile ? (\n                <Home />\n            ) : (\n                <Landing />\n            )}\n\n            {/* check is modal is open */}\n            {applicationState && applicationState.modal?.modalOpen && (\n                <ModalContainer />\n            )}\n\n            {/* toast notification container */}\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={4000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </div>\n    );\n};\n\nexport default App;\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx",["156"],"import React from 'react';\r\nimport './landing.css';\r\nimport typewriter from '../../assets/images/typewriter.png';\r\nimport yellowSwiggle from '../../assets/yellow-swiggle.svg';\r\nimport redSwiggle from '../../assets/red-swiggle.svg';\r\nimport whiteSwiggle from '../../assets/white-swiggle.svg';\r\nimport formSwiggle from '../../assets/form-red-swiggle.svg';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\n\r\nconst Landing = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <div className=\"image-section\">\r\n                <h3 className=\"logo-gradient\">Archive.</h3>\r\n                <img\r\n                    className=\"swiggle yellow-swiggle\"\r\n                    src={yellowSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle white-swiggle\"\r\n                    src={whiteSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle red-swiggle\"\r\n                    src={redSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"login-section\">\r\n                <LoginForm />\r\n\r\n                <img\r\n                    className=\"swiggle form-swiggle\"\r\n                    src={formSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <img className=\"typewriter\" src={typewriter} alt=\"\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx",["157"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport EditorPage from '../Editor/EditorPage';\r\nimport Explore from '../Explore/Explore';\r\nimport Feed from '../Feed/Feed';\r\nimport ModalContainer from '../Modal/ModalContainer';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport Profile from '../Profile/Profile';\r\nimport Settings from '../Settings/Settings';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <BrowserRouter>\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Feed} />\r\n                    <Route exact path=\"/user/:id\" component={Profile} />\r\n                    <Route path=\"/settings\" component={Settings} />\r\n                    <Route exact path=\"/explore\" component={Explore} />\r\n                    <Route exact path=\"/editor\" component={EditorPage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx",["158","159","160"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx",["161"],"import React from 'react';\r\nimport ProfileSettings from './Profile/ProfileSettings';\r\nimport './settings.css';\r\nimport { Link, NavLink, Route } from 'react-router-dom';\r\nimport AccountSettings from './Account/AccountSettings';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className=\"settings\">\r\n            <h1>Settings</h1>\r\n            {/* <Link to=\"/settings/account\">account settings</Link>|\r\n            <Link to=\"/settings/\">profile settings</Link> */}\r\n            <div className=\"settings-container\">\r\n                <div className=\"setting-links\">\r\n                    <ul className=\"links\">\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/\"\r\n                            >\r\n                                Profile\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/account\"\r\n                            >\r\n                                Account\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                to=\"/settings/about\"\r\n                            >\r\n                                About\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"setting-content\">\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/\"\r\n                        component={ProfileSettings}\r\n                    />\r\n\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/account\"\r\n                        component={AccountSettings}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx",["162"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { updateUserProfile } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profileSettings.css';\r\n\r\nconst ProfileSettings = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const dispatch = useDispatch();\r\n\r\n    // extract the profile information from redux state\r\n    const accessToken = userState && userState.client?.accessToken;\r\n    const profile = userState && userState.client!.profile;\r\n    const [profileData, setProfileData] = useState({\r\n        firstName: profile.firstName,\r\n        lastName: profile.lastName,\r\n        interest: profile.interest,\r\n        workplace: profile.workplace,\r\n        bio: profile.bio,\r\n    });\r\n\r\n    const handleChange = (e: any) => {\r\n        setProfileData({\r\n            ...profileData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        dispatch(updateUserProfile(profileData, accessToken!));\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-settings\">\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">theme</h2>\r\n                <p className=\"section-description\">\r\n                    Select a theme for you application. Your preference will be\r\n                    saved automatically.\r\n                </p>\r\n\r\n                <div className=\"themes\">\r\n                    <div className=\"theme light-theme\">\r\n                        <span>Light</span>\r\n                    </div>\r\n                    <div className=\"theme dark-theme\">\r\n                        <span>Dark</span>\r\n                    </div>\r\n                    <div className=\"theme high-contrast\">\r\n                        <span>High Contrast</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">your profile</h2>\r\n                <p className=\"section-description\">Profile Picture</p>\r\n                <div className=\"profile-pictures\">\r\n                    <div className=\"change-profile\">\r\n                        <span>Click here to change your profile</span>\r\n                    </div>\r\n                    <div className=\"profile\"></div>\r\n                </div>\r\n\r\n                <p className=\"section-description\">Header Image</p>\r\n                <div className=\"header-images\">\r\n                    <div className=\"change-header\">\r\n                        Click here to change your header\r\n                    </div>\r\n                    <div className=\"header\"></div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">about you</h2>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"name-input\" className=\"section-description\">\r\n                        First Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"name-input\"\r\n                        placeholder=\"Your First Name\"\r\n                        value={profileData.firstName}\r\n                        name=\"firstName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"last-name-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Last Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"last-name-input\"\r\n                        placeholder=\"Your Last Name\"\r\n                        value={profileData.lastName}\r\n                        name=\"lastName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"interest-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Interest/ Education\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"What do you do?/ What are you interested in?\"\r\n                        value={profileData.interest}\r\n                        name=\"interest\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"workplace-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Workplace\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"Where do you work?\"\r\n                        value={profileData.workplace}\r\n                        name=\"workplace\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label htmlFor=\"bio-input\" className=\"section-description\">\r\n                        Bio\r\n                    </label>\r\n                    <textarea\r\n                        className=\"bio-input\"\r\n                        id=\"\"\r\n                        cols={30}\r\n                        rows={5}\r\n                        placeholder=\"Write something about yourself\"\r\n                        value={profileData.bio}\r\n                        name=\"bio\"\r\n                        onChange={handleChange}\r\n                    ></textarea>\r\n                    <p\r\n                        style={{\r\n                            color:\r\n                                profileData.bio.length >= 200\r\n                                    ? '#dd3b40'\r\n                                    : 'black',\r\n                        }}\r\n                        className=\"bio-length\"\r\n                    >\r\n                        {profileData.bio.length}/200\r\n                    </p>\r\n\r\n                    <button\r\n                        className=\"save-btn\"\r\n                        disabled={profileData.bio.length > 200}\r\n                    >\r\n                        Save Changes\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx",["163","164","165"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { openModal } from 'src/redux/Actions/applicationActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { showSuccessToast } from '../Utils/ToastNotification';\r\nimport './editor.css';\r\nimport Wysiwyg from './Wysiwyg/Wysiwyg';\r\n\r\nconst EditorPage = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    //\r\n    const [blogTitle, setBlogTitle] = useState<string | null>(null);\r\n    const [blogTopics, setBlogTopics] = useState<\r\n        Array<{ topic_id: number; topic_image: string; topic_title: string }>\r\n    >([]);\r\n    const [selectedTopic, setSelectedTopic] = useState<number | null>(null);\r\n\r\n    // image preview and error\r\n    const imageUpload = useRef<any>(null);\r\n\r\n    const [previewSource, setPreviewSource] = useState<any>(null);\r\n    const [imageError, setImageError] = useState<string | null>(null);\r\n\r\n    // editor state, onchange functions\r\n    const [editorHTML, setEditorHTML] = useState();\r\n    const [editorError, setEditorError] = useState<string | null>(null);\r\n\r\n    // image uploader and previewer\r\n    const openFileUploader = (): void => {\r\n        imageUpload.current!.click();\r\n    };\r\n\r\n    const handleFileInputChange = (e: any): void => {\r\n        const file = e.target.files![0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                setImageError('The uploaded file has to be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                setImageError('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            setImageError(null);\r\n            previewImage(file);\r\n        }\r\n    };\r\n\r\n    const previewImage = (file: Blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const removePreviewImage = () => {\r\n        setPreviewSource(null);\r\n    };\r\n\r\n    // blog submission and validation\r\n    const handleSubmit = () => {\r\n        if (!blogTitle) {\r\n            setEditorError('Your blog must have a title.');\r\n        } else if (!previewSource) {\r\n            setEditorError('You must upload an image.');\r\n        } else if (!selectedTopic) {\r\n            setEditorError('You must select a topic.');\r\n        } else if (!editorHTML) {\r\n            setEditorError('Your blog cannot be empty.');\r\n        } else {\r\n            setEditorError(null);\r\n            // dispatch(openModal('uploadBlog'));\r\n\r\n            // upload the blog\r\n            uploadBlog();\r\n        }\r\n    };\r\n\r\n    const uploadBlog = async () => {\r\n        const blogData = {\r\n            blogTitle,\r\n            blogContent: editorHTML,\r\n            topicId: selectedTopic,\r\n            encodedImage: previewSource,\r\n        };\r\n\r\n        const res = await fetch('blog/postBlog', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: `bearer ${\r\n                    userState && userState.client?.accessToken\r\n                }`,\r\n            },\r\n            body: JSON.stringify(blogData),\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            showSuccessToast('Blog Successfully Published.');\r\n            history.push(\r\n                `/user/${userState && userState.client?.profile.userId}`\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await fetch('blog/getTopics');\r\n            const data = await res.json();\r\n            setBlogTopics(data.data);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"editor-page\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"story-title\"\r\n                placeholder=\"Title your Story...\"\r\n                onChange={e => {\r\n                    setBlogTitle(e.target.value);\r\n                }}\r\n            />\r\n\r\n            <input\r\n                type=\"file\"\r\n                name=\"image\"\r\n                ref={imageUpload}\r\n                style={{ display: 'none' }}\r\n                onChange={handleFileInputChange}\r\n            />\r\n\r\n            {previewSource ? (\r\n                <div className=\"header-image\">\r\n                    <svg\r\n                        onClick={removePreviewImage}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                    >\r\n                        <path d=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\" />\r\n                    </svg>\r\n                    <img src={previewSource} alt=\"Header Image\" />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div\r\n                        className=\"header-image-placeholder\"\r\n                        onClick={openFileUploader}\r\n                    >\r\n                        <p>Click here to upload a header.</p>\r\n                    </div>\r\n                    <p className=\"error-message\">{imageError && imageError}</p>\r\n                </div>\r\n            )}\r\n\r\n            <label className=\"topic-label\" htmlFor=\"blog-topic\">\r\n                Select a topic for your blog:{' '}\r\n            </label>\r\n            <select\r\n                id=\"blog-topic\"\r\n                onChange={(e: any) => {\r\n                    setSelectedTopic(+e.target.value);\r\n                }}\r\n            >\r\n                <option id=\"blog-option\" selected disabled>\r\n                    Select a topic\r\n                </option>\r\n                {blogTopics.map(topic => (\r\n                    <option key={topic.topic_id} value={topic.topic_id}>\r\n                        {topic.topic_title}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <p className=\"error-message\">{editorError && editorError}</p>\r\n\r\n            <Wysiwyg\r\n                setEditorHTML={setEditorHTML}\r\n                editorHTML={editorHTML}\r\n                handleSubmit={handleSubmit}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx",["166"],"import React, { useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst Wysiwyg = ({ setEditorHTML, editorHTML, handleSubmit }: any) => {\r\n    // const [editorHTML, setEditorHTML] = useState('');\r\n\r\n    const handleEditorChange = (html: string) => {\r\n        setEditorHTML(html);\r\n    };\r\n\r\n    const modules = {\r\n        toolbar: [\r\n            [{ header: '1' }, { header: '2' }, { font: [] }],\r\n            [{ size: [] }],\r\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n            [\r\n                { list: 'ordered' },\r\n                { list: 'bullet' },\r\n                { indent: '-1' },\r\n                { indent: '+1' },\r\n            ],\r\n            ['link', 'image', 'video'],\r\n            ['clean'],\r\n        ],\r\n        clipboard: {\r\n            matchVisual: false,\r\n        },\r\n    };\r\n\r\n    const formats = [\r\n        'header',\r\n        'font',\r\n        'size',\r\n        'bold',\r\n        'italic',\r\n        'underline',\r\n        'strike',\r\n        'blockquote',\r\n        'list',\r\n        'bullet',\r\n        'indent',\r\n        'link',\r\n        'image',\r\n        'video',\r\n    ];\r\n\r\n    return (\r\n        <div className=\"Wysiwyg\">\r\n            <ReactQuill\r\n                className=\"actual-editor\"\r\n                theme=\"snow\"\r\n                value={editorHTML || ''}\r\n                onChange={handleEditorChange}\r\n                modules={modules}\r\n                formats={formats}\r\n                placeholder=\"Start Sharing...\"\r\n                bounds=\".app\"\r\n            />\r\n\r\n            <div className=\"editor-controls\">\r\n                <button className=\"draft-btn\">Save as draft</button>\r\n                <button className=\"publish-btn\" onClick={handleSubmit}>\r\n                    Publish Story\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wysiwyg;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts",["167","168"],"import { StringMappingType } from 'typescript';\r\n\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_FAILED = 'USER_FAILED';\r\nexport const USER_SUCCESS = 'USER_SUCCESS';\r\nexport const USER_LOGIN_FAILED = 'LOGIN_FAILED';\r\nexport const USER_LOGGED_OUT = 'USER_LOGGED_OUT';\r\nexport const TOKEN_FAILED = 'TOKEN_SUCCESS';\r\nexport const USER_PROFILE_UPDATED = 'USER_PROFILE_UPDATED';\r\nexport const USER_ACCOUNT_UPDATED = 'USER_ACCOUNT_UPDATED';\r\n\r\nexport type UserType = {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    interest: string;\r\n    workplace: string;\r\n    bio: string;\r\n    usersFollowed: number[];\r\n    topicsFollowed: number[];\r\n    profileImage: string;\r\n    headerImage: string;\r\n};\r\n\r\nexport type UserProfileType = {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    bio: string;\r\n    workplace: string;\r\n};\r\n\r\ntype LoginErrorType = {\r\n    message: string;\r\n};\r\n\r\nexport type LoginDataType = {\r\n    profile: UserType;\r\n    accessToken: string;\r\n};\r\n\r\nexport interface UserLoading {\r\n    type: typeof USER_LOADING;\r\n}\r\n\r\nexport interface UserFailed {\r\n    type: typeof USER_FAILED;\r\n}\r\n\r\nexport interface UserSuccess {\r\n    type: typeof USER_SUCCESS;\r\n    payload: LoginDataType;\r\n}\r\n\r\nexport interface UserLoginFailed {\r\n    type: typeof USER_LOGIN_FAILED;\r\n    // payload: LoginErrorType;\r\n    payload: {\r\n        message: string;\r\n    };\r\n}\r\n\r\nexport interface UserLoggedOut {\r\n    type: typeof USER_LOGGED_OUT;\r\n}\r\n\r\nexport interface TokenRefreshFailed {\r\n    type: typeof TOKEN_FAILED;\r\n}\r\n\r\nexport interface UserProfileUpdated {\r\n    type: typeof USER_PROFILE_UPDATED;\r\n    payload: UserProfileType;\r\n}\r\n\r\nexport interface UserAccountUpdated {\r\n    type: typeof USER_ACCOUNT_UPDATED;\r\n    payload: { email: string };\r\n}\r\n\r\nexport type UserDispatchType =\r\n    | UserLoading\r\n    | UserFailed\r\n    | UserSuccess\r\n    | UserLoginFailed\r\n    | UserLoggedOut\r\n    | TokenRefreshFailed\r\n    | UserProfileUpdated\r\n    | UserAccountUpdated;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx",["169"],"import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logoutIcon } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { logOutUser } from 'src/redux/Actions/userActions';\r\nimport './logoutModal.css';\r\n\r\nconst LogoutModal = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"logout-modal\">\r\n            <div className=\"icon-section\">{logoutIcon}</div>\r\n\r\n            <div className=\"content-section\">\r\n                <h2>Are you sure you want to log out?</h2>\r\n                <p>\r\n                    You will have to enter the credentials again before you can\r\n                    log back in.\r\n                </p>\r\n\r\n                <button\r\n                    className=\"logout-btn\"\r\n                    onClick={() => {\r\n                        dispatch(logOutUser);\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Log Out\r\n                </button>\r\n                <button\r\n                    className=\"cancel-btn\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogoutModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts",["170"],"import {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from '../Actions/applicationActionTypes';\r\n\r\ninterface DefaultApplicationStateType {\r\n    applicationTheme: string;\r\n    modal?: {\r\n        modalOpen: boolean;\r\n        modalType?: string;\r\n    };\r\n}\r\n\r\nconst defaultApplicationState: DefaultApplicationStateType = {\r\n    applicationTheme: 'light',\r\n};\r\n\r\nexport const applicationReducer = (\r\n    state: DefaultApplicationStateType = defaultApplicationState,\r\n    action: ApplicationDispatchType\r\n): DefaultApplicationStateType => {\r\n    switch (action.type) {\r\n        case MODAL_OPEN:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: true,\r\n                    modalType: action.payload.modalType,\r\n                },\r\n            };\r\n\r\n        case MODAL_CLOSE:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: false,\r\n                },\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts",["171"],"import { Dispatch } from 'redux';\r\nimport {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from './applicationActionTypes';\r\n\r\nexport const openModal = (modalType: string) => (\r\n    dispatch: Dispatch<ApplicationDispatchType>\r\n) => {\r\n    dispatch({\r\n        type: MODAL_OPEN,\r\n        payload: { modalType },\r\n    });\r\n};\r\n\r\nexport const closeModal = (dispatch: Dispatch<ApplicationDispatchType>) => {\r\n    dispatch({\r\n        type: MODAL_CLOSE,\r\n    });\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":14},{"ruleId":"176","severity":1,"message":"180","line":15,"column":12,"nodeType":"178","messageId":"179","endLine":15,"endColumn":22},{"ruleId":"176","severity":1,"message":"181","line":15,"column":24,"nodeType":"178","messageId":"179","endLine":15,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":30,"column":8,"nodeType":"184","endLine":30,"endColumn":10,"suggestions":"185"},{"ruleId":"176","severity":1,"message":"186","line":13,"column":11,"nodeType":"178","messageId":"179","endLine":13,"endColumn":20},{"ruleId":"176","severity":1,"message":"187","line":6,"column":8,"nodeType":"178","messageId":"179","endLine":6,"endColumn":22},{"ruleId":"176","severity":1,"message":"188","line":2,"column":10,"nodeType":"178","messageId":"179","endLine":2,"endColumn":26},{"ruleId":"176","severity":1,"message":"189","line":24,"column":12,"nodeType":"178","messageId":"179","endLine":24,"endColumn":22},{"ruleId":"182","severity":1,"message":"190","line":81,"column":8,"nodeType":"184","endLine":81,"endColumn":10,"suggestions":"191"},{"ruleId":"176","severity":1,"message":"192","line":4,"column":10,"nodeType":"178","messageId":"179","endLine":4,"endColumn":14},{"ruleId":"176","severity":1,"message":"193","line":3,"column":10,"nodeType":"178","messageId":"179","endLine":3,"endColumn":28},{"ruleId":"176","severity":1,"message":"194","line":4,"column":10,"nodeType":"178","messageId":"179","endLine":4,"endColumn":19},{"ruleId":"176","severity":1,"message":"195","line":11,"column":11,"nodeType":"178","messageId":"179","endLine":11,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":150,"column":21,"nodeType":"198","endLine":150,"endColumn":67},{"ruleId":"176","severity":1,"message":"199","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"200","line":1,"column":10,"nodeType":"178","messageId":"179","endLine":1,"endColumn":27},{"ruleId":"176","severity":1,"message":"201","line":34,"column":6,"nodeType":"178","messageId":"179","endLine":34,"endColumn":20},{"ruleId":"176","severity":1,"message":"202","line":12,"column":11,"nodeType":"178","messageId":"179","endLine":12,"endColumn":18},{"ruleId":"176","severity":1,"message":"203","line":4,"column":5,"nodeType":"178","messageId":"179","endLine":4,"endColumn":17},{"ruleId":"176","severity":1,"message":"203","line":5,"column":5,"nodeType":"178","messageId":"179","endLine":5,"endColumn":17},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"@typescript-eslint/no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'userLogged' is assigned a value but never used.","'setUserLogged' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["206"],"'userState' is assigned a value but never used.","'ModalContainer' is defined but never used.","'couldStartTrivia' is defined but never used.","'userExists' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'profileBlogs' and 'profileId'. Either include them or remove the dependency array. You can also do a functional update 'setProfileBlogs(p => ...)' if you only need 'profileBlogs' in the 'setProfileBlogs' call.",["207"],"'Link' is defined but never used.","'bindActionCreators' is defined but never used.","'openModal' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'StringMappingType' is defined but never used.","'LoginErrorType' is defined but never used.","'history' is assigned a value but never used.","'CHANGE_THEME' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},"Update the dependencies array to be: [dispatch]",{"range":"212","text":"213"},"Update the dependencies array to be: [profileBlogs, profileId]",{"range":"214","text":"215"},[1047,1049],"[dispatch]",[2528,2530],"[profileBlogs, profileId]"]