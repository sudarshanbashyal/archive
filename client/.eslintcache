[{"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx":"1","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts":"2","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx":"3","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx":"4","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx":"6","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx":"7","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx":"8","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx":"9","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx":"10","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx":"11","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx":"12","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx":"13","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx":"14","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx":"15","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx":"16","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx":"17","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx":"18","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx":"19","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx":"20","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx":"21","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx":"22","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx":"23","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts":"24","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts":"25","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts":"26","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx":"27","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts":"28","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx":"29","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts":"30","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts":"31","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts":"32","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts":"33","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx":"34","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx":"35","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx":"36","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx":"37","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Reader.tsx":"38","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderBlog.tsx":"39","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comments.tsx":"40","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderWysiwyg.tsx":"41","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comment.tsx":"42","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileNavigation\\ProfileNavigation.tsx":"43","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBookmarks\\ProfileBookmarks.tsx":"44","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileDrafts\\ProfileDrafts.tsx":"45","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\TextBlogs\\TextBlog.tsx":"46","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\ExploreTopics\\ExploreTopics.tsx":"47","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\ChildrenComment.tsx":"48","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\About\\About.tsx":"49","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\BlogDeleteModal\\BlogDeleteModal.tsx":"50"},{"size":646,"mtime":1612687051228,"results":"51","hashOfConfig":"52"},{"size":425,"mtime":499162500000,"results":"53","hashOfConfig":"52"},{"size":2384,"mtime":1626337964136,"results":"54","hashOfConfig":"52"},{"size":4760,"mtime":1624431501405,"results":"55","hashOfConfig":"52"},{"size":3345,"mtime":1625305471131,"results":"56","hashOfConfig":"52"},{"size":1570,"mtime":1625305422436,"results":"57","hashOfConfig":"52"},{"size":2922,"mtime":1626365056756,"results":"58","hashOfConfig":"52"},{"size":2019,"mtime":1620904172233,"results":"59","hashOfConfig":"52"},{"size":5006,"mtime":1626337791460,"results":"60","hashOfConfig":"52"},{"size":1133,"mtime":1618906422039,"results":"61","hashOfConfig":"52"},{"size":11371,"mtime":1626338950778,"results":"62","hashOfConfig":"52"},{"size":975,"mtime":1626338999593,"results":"63","hashOfConfig":"52"},{"size":4306,"mtime":1622549532512,"results":"64","hashOfConfig":"52"},{"size":3022,"mtime":1626345133682,"results":"65","hashOfConfig":"52"},{"size":12405,"mtime":1626522740902,"results":"66","hashOfConfig":"52"},{"size":6629,"mtime":1620905424161,"results":"67","hashOfConfig":"52"},{"size":7643,"mtime":1626522155668,"results":"68","hashOfConfig":"52"},{"size":1715,"mtime":1626523737477,"results":"69","hashOfConfig":"52"},{"size":15055,"mtime":1626763522025,"results":"70","hashOfConfig":"52"},{"size":42386,"mtime":1626708619408,"results":"71","hashOfConfig":"52"},{"size":8910,"mtime":1620903965484,"results":"72","hashOfConfig":"52"},{"size":1978,"mtime":1620891708577,"results":"73","hashOfConfig":"52"},{"size":2768,"mtime":1625305566415,"results":"74","hashOfConfig":"52"},{"size":572,"mtime":1612706728128,"results":"75","hashOfConfig":"52"},{"size":5762,"mtime":1618920264286,"results":"76","hashOfConfig":"52"},{"size":3388,"mtime":1618920210845,"results":"77","hashOfConfig":"52"},{"size":2067,"mtime":1612707275282,"results":"78","hashOfConfig":"52"},{"size":10950,"mtime":1626364469545,"results":"79","hashOfConfig":"52"},{"size":2161,"mtime":1625302060419,"results":"80","hashOfConfig":"52"},{"size":1223,"mtime":1620902688652,"results":"81","hashOfConfig":"52"},{"size":659,"mtime":1620901527970,"results":"82","hashOfConfig":"52"},{"size":784,"mtime":1620902148201,"results":"83","hashOfConfig":"52"},{"size":708,"mtime":1620822680975,"results":"84","hashOfConfig":"52"},{"size":1802,"mtime":1625301702627,"results":"85","hashOfConfig":"52"},{"size":6599,"mtime":1626526734848,"results":"86","hashOfConfig":"52"},{"size":3895,"mtime":1626786776523,"results":"87","hashOfConfig":"52"},{"size":2542,"mtime":1625301944410,"results":"88","hashOfConfig":"52"},{"size":3470,"mtime":1622796039891,"results":"89","hashOfConfig":"52"},{"size":7188,"mtime":1626523630803,"results":"90","hashOfConfig":"52"},{"size":3961,"mtime":1622545397912,"results":"91","hashOfConfig":"52"},{"size":610,"mtime":1618816043372,"results":"92","hashOfConfig":"52"},{"size":9693,"mtime":1626523004202,"results":"93","hashOfConfig":"52"},{"size":2254,"mtime":1620905026196,"results":"94","hashOfConfig":"52"},{"size":2832,"mtime":1620905098291,"results":"95","hashOfConfig":"52"},{"size":3022,"mtime":1620905064442,"results":"96","hashOfConfig":"52"},{"size":3108,"mtime":1620904971383,"results":"97","hashOfConfig":"52"},{"size":952,"mtime":1620720183929,"results":"98","hashOfConfig":"52"},{"size":3985,"mtime":1622548236589,"results":"99","hashOfConfig":"52"},{"size":2532,"mtime":1626709525807,"results":"100","hashOfConfig":"52"},{"size":2892,"mtime":1626530034386,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"2hvudg",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"104"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"104"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"104"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"104"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"104"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"104"},"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx",[],["226","227"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx",["228","229","230"],"import React, { useEffect, useState } from 'react';\nimport Home from './components/Home/Home';\nimport Landing from './components/Landing/Landing';\nimport ModalContainer from './components/Modal/ModalContainer';\nimport './index.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStore } from './redux/store';\nimport { refreshToken } from './redux/Actions/userActions';\nimport { ToastContainer } from 'react-toastify';\nimport { changeTheme } from './redux/Actions/applicationActions';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    // const [userLogged, setUserLogged] = useState(\n    //     localStorage.getItem('userLoggedIn')\n    // );\n\n    const [applicationTheme, setApplicationTheme] = useState<string | null>(\n        localStorage.getItem('applicationTheme')\n    );\n\n    // get user from the state\n    const userState = useSelector((state: RootStore) => state.client);\n\n    // get application state\n    const applicationState = useSelector(\n        (state: RootStore) => state.application\n    );\n\n    // request the backend for token with the cookie\n    useEffect(() => {\n        dispatch(refreshToken());\n    }, []);\n\n    //\n    useEffect(() => {\n        if (applicationTheme) {\n            dispatch(changeTheme(applicationTheme));\n        }\n    }, []);\n\n    //\n\n    return (\n        <div\n            className={\n                'App ' +\n                (applicationState &&\n                applicationState.applicationTheme === 'dark'\n                    ? 'App-dark'\n                    : '')\n            }\n        >\n            {/* Render Home page if the user is in the store */}\n            {userState.loading ? null : userState.client?.profile ? (\n                <Home />\n            ) : (\n                <Landing />\n            )}\n\n            {/* check is modal is open */}\n            {applicationState && applicationState.modal?.modalOpen && (\n                <ModalContainer />\n            )}\n\n            {/* toast notification container */}\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={4000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </div>\n    );\n};\n\nexport default App;\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx",["231","232"],"import React from 'react';\r\nimport './landing.css';\r\nimport typewriter from '../../assets/images/typewriter.png';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Landing = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <div className=\"image-section\">\r\n                <h3 className=\"logo-gradient\">Archive.</h3>\r\n\r\n                <motion.svg\r\n                    className=\"swiggle yellow-swiggle\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 3307.87 2008.76\"\r\n                >\r\n                    <motion.path\r\n                        initial={{\r\n                            pathLength: 0,\r\n                        }}\r\n                        animate={{\r\n                            pathLength: 1,\r\n                        }}\r\n                        transition={{\r\n                            duration: 1,\r\n                            ease: 'easeInOut',\r\n                        }}\r\n                        d=\"M3.89.94c135.67 558.35-39.14 2311.67 923.62 1956.84S1882.44 473.19 3307 162.71\"\r\n                        fill=\"none\"\r\n                        stroke=\"#ffc94a\"\r\n                        strokeMiterlimit={10}\r\n                        strokeWidth={9}\r\n                    />\r\n                </motion.svg>\r\n\r\n                <motion.svg\r\n                    className=\"swiggle white-swiggle\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 3810.79 2110.73\"\r\n                >\r\n                    <motion.path\r\n                        initial={{\r\n                            pathLength: 0,\r\n                        }}\r\n                        animate={{\r\n                            pathLength: 1,\r\n                        }}\r\n                        transition={{\r\n                            duration: 1,\r\n                            ease: 'easeInOut',\r\n                        }}\r\n                        d=\"M3810.57 4c-915.8 52.19-2100.34 814.05-2463 1294.12S1.27 2106.93 1.27 2106.93\"\r\n                        fill=\"none\"\r\n                        stroke=\"#fff\"\r\n                        strokeMiterlimit={10}\r\n                        strokeWidth={9}\r\n                    />\r\n                </motion.svg>\r\n\r\n                <motion.svg\r\n                    className=\"swiggle red-swiggle\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 3109.57 676.17\"\r\n                >\r\n                    <motion.path\r\n                        initial={{\r\n                            pathLength: 0,\r\n                        }}\r\n                        animate={{\r\n                            pathLength: 1,\r\n                        }}\r\n                        transition={{\r\n                            duration: 0.5,\r\n                            ease: 'easeInOut',\r\n                        }}\r\n                        d=\"M2.51 163.19C371.14-134.65 945.45 2.92 1404.94 430.32s1302.18 251.09 1701.53-237.74\"\r\n                        fill=\"none\"\r\n                        stroke=\"#f27a7f\"\r\n                        strokeMiterlimit={10}\r\n                        strokeWidth={9}\r\n                    />\r\n                </motion.svg>\r\n\r\n                <img className=\"typewriter\" src={typewriter} />\r\n            </div>\r\n\r\n            <div className=\"login-section\">\r\n                <LoginForm />\r\n\r\n                <motion.svg\r\n                    className=\"swiggle form-swiggle\"\r\n                    data-name=\"Layer 1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 1240.62 1721.25\"\r\n                >\r\n                    <motion.path\r\n                        initial={{\r\n                            pathLength: 0,\r\n                        }}\r\n                        animate={{\r\n                            pathLength: 1,\r\n                        }}\r\n                        transition={{\r\n                            duration: 1,\r\n                            ease: 'easeInOut',\r\n                        }}\r\n                        d=\"M290.41 0c0 266.13-10.12 477.63-93.93 641.84C3.41 1020.16-414.05 1894.21 1240.12 1685.48\"\r\n                        fill=\"none\"\r\n                        stroke=\"#de3b40\"\r\n                        strokeMiterlimit={10}\r\n                        strokeWidth={9}\r\n                    />\r\n                </motion.svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx",["233"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { loadingAnimation } from 'src/assets/SVGs';\r\nimport { bookmarkBlogInterface } from 'src/components/Profile/ProfileBookmarks/ProfileBookmarks';\r\nimport TextBlog from 'src/components/Profile/TextBlogs/TextBlog';\r\nimport { showFailureToast } from 'src/components/Utils/ToastNotification';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './blogs.css';\r\n\r\nconst Blogs = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const [feedBlogs, setFeedBlogs] = useState<bookmarkBlogInterface[]>([]);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        (async function generateFeed() {\r\n            const res = await fetch(`/blog/generateFeed`, {\r\n                headers: {\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                console.log(data);\r\n                setFeedBlogs(data.feed);\r\n                setLoading(false);\r\n            } else {\r\n                setLoading(false);\r\n                showFailureToast('Something Went Wrong! Please try again.');\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return !loading ? (\r\n        <div className=\"blogs\">\r\n            {feedBlogs.map(blog => (\r\n                <TextBlog\r\n                    key={blog.blogId}\r\n                    blogId={blog.blogId}\r\n                    blogTitle={blog.blogTitle}\r\n                    authorId={blog.authorId}\r\n                    authorName={blog.authorName}\r\n                    authorProfileImage={blog.authorProfileImage}\r\n                    blogTopic={blog.blogTopic}\r\n                />\r\n            ))}\r\n        </div>\r\n    ) : (\r\n        loadingAnimation\r\n    );\r\n};\r\n\r\nexport default Blogs;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx",["234"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { defaultProfileImage } from 'src/assets/SVGs';\r\nimport { unfollowUser, followUser } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './recommendations.css';\r\n\r\ninterface recommendUsersInterface {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string | null;\r\n    workplace: string | null;\r\n    profileImage: string | null;\r\n}\r\n\r\nconst Recommendations = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    const [recommendedUsers, setRecommendedUsers] = useState<\r\n        recommendUsersInterface[]\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        const usersFollowed =\r\n            userState && userState.client?.profile.usersFollowed.toString();\r\n\r\n        (async function recommendUsers() {\r\n            const res = await fetch(`/user/recommendUsers`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    usersFollowed,\r\n                    userId: userState && userState.client?.profile.userId,\r\n                }),\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                setRecommendedUsers(data.users);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return recommendedUsers[0] ? (\r\n        <div\r\n            className={\r\n                'recommendations ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'recommendations-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <h2>people you might want to follow</h2>\r\n\r\n            <div className=\"users\">\r\n                {recommendedUsers.map((user, index) => (\r\n                    <div key={index} className=\"user\">\r\n                        <div className=\"user-container\">\r\n                            <div className=\"user-profile\">\r\n                                <img\r\n                                    src={\r\n                                        user.profileImage || defaultProfileImage\r\n                                    }\r\n                                    alt=\"\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"user-info\">\r\n                                <Link\r\n                                    className=\"link\"\r\n                                    to={`/user/${user.userId}`}\r\n                                >\r\n                                    <span className=\"user-name\">\r\n                                        {user.firstName} {user.lastName}\r\n                                    </span>{' '}\r\n                                </Link>\r\n\r\n                                <br />\r\n                                <span>{user.interest || ''}</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {userState &&\r\n                        userState.client?.profile.usersFollowed.includes(\r\n                            user.userId\r\n                        ) ? (\r\n                            <button\r\n                                className=\"follow-btn\"\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        unfollowUser(\r\n                                            user.userId,\r\n                                            userState &&\r\n                                                userState.client?.accessToken\r\n                                        )\r\n                                    );\r\n                                }}\r\n                            >\r\n                                Following\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                className=\"follow-btn\"\r\n                                onClick={() => {\r\n                                    dispatch(\r\n                                        followUser(\r\n                                            user.userId,\r\n                                            userState &&\r\n                                                userState.client?.accessToken\r\n                                        )\r\n                                    );\r\n                                }}\r\n                            >\r\n                                Follow\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    ) : null;\r\n};\r\n\r\nexport default Recommendations;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx",[],["235","236"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx",["237","238"],"import React, { useEffect, useState, lazy, Suspense } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { loadingAnimation } from 'src/assets/SVGs';\r\nimport { openModal } from 'src/redux/Actions/applicationActions';\r\nimport { followUser, unfollowUser } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profile.css';\r\nimport ProfileNavigation from './ProfileNavigation/ProfileNavigation';\r\n\r\nconst ProfileBlogs = lazy(() => import('./ProfileBlogs/ProfileBlogs'));\r\nconst ProfileBookmarks = lazy(\r\n    () => import('./ProfileBookmarks/ProfileBookmarks')\r\n);\r\nconst ProfileDrafts = lazy(() => import('./ProfileDrafts/ProfileDrafts'));\r\n\r\ninterface ProfileInfoType {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    workplace: string;\r\n    topicsFollowed: number[];\r\n    usersFollowed: number[];\r\n    userFollowers: number;\r\n    profileimage?: string | undefined;\r\n    headerimage?: string | undefined;\r\n}\r\n\r\nexport interface ProfileBlogType {\r\n    blogId: number;\r\n    title: string;\r\n    createdAt: Date;\r\n    headerImage: string;\r\n    topicTitle: string;\r\n    likes: number[];\r\n}\r\n\r\nexport const blogsType = 'blogs';\r\nexport const bookmarksType = 'bookmarks';\r\nexport const draftsType = 'drafts';\r\n\r\nexport type ProfileNavigationType =\r\n    | typeof blogsType\r\n    | typeof bookmarksType\r\n    | typeof draftsType;\r\n\r\nconst Profile = (props: any) => {\r\n    const { id: profileId, section: sectionName } = props.match.params;\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const [userExists, setUserExists] = useState<boolean>(true);\r\n    const [profileInfo, setProfileInfo] = useState<ProfileInfoType>({\r\n        firstName: '',\r\n        lastName: '',\r\n        interest: '',\r\n        workplace: '',\r\n        topicsFollowed: [],\r\n        usersFollowed: [],\r\n        userFollowers: 0,\r\n    });\r\n    const [profileBlogs, setProfileBlogs] = useState<ProfileBlogType[]>([]);\r\n\r\n    const [currentProfileNavigation, setCurrentProfileNavigation] =\r\n        useState<ProfileNavigationType>('blogs');\r\n\r\n    // check if any section name was passed, the user is only able to navigate his own profile's sections\r\n    useEffect(() => {\r\n        if (\r\n            sectionName &&\r\n            +profileId === +(userState && userState.client!.profile.userId)\r\n        ) {\r\n            setCurrentProfileNavigation(sectionName);\r\n        } else {\r\n            setCurrentProfileNavigation('blogs');\r\n        }\r\n    }, [window.location.href]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            setLoading(true);\r\n            setProfileBlogs([]);\r\n            const res = await fetch(`/user/getUser/${profileId}`);\r\n            const data = await res.json();\r\n            console.log(data);\r\n\r\n            if (data.ok) {\r\n                // set up profile info\r\n                let {\r\n                    first_name,\r\n                    last_name,\r\n                    interest,\r\n                    workplace,\r\n                    users_followed,\r\n                    topics_followed,\r\n                    profileimage,\r\n                    headerimage,\r\n                } = data.info[0];\r\n                setProfileInfo({\r\n                    firstName: first_name,\r\n                    lastName: last_name,\r\n                    interest,\r\n                    workplace,\r\n                    topicsFollowed: topics_followed,\r\n                    usersFollowed: users_followed,\r\n                    userFollowers: data.followers.length,\r\n                    profileimage,\r\n                    headerimage,\r\n                });\r\n\r\n                if (!data.info[0].title) {\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                // retrieve all the blogs\r\n                const retrievedBlogs = data.info.map(\r\n                    (blog: any): ProfileBlogType => {\r\n                        const {\r\n                            blog_id: blogId,\r\n                            title,\r\n                            created_at: createdAt,\r\n                            header_image: headerImage,\r\n                            topic_title: topicTitle,\r\n                            likes,\r\n                        } = blog;\r\n\r\n                        return {\r\n                            blogId,\r\n                            title,\r\n                            createdAt,\r\n                            headerImage,\r\n                            topicTitle,\r\n                            likes,\r\n                        };\r\n                    }\r\n                );\r\n\r\n                setProfileBlogs(profileBlogs => [\r\n                    ...profileBlogs,\r\n                    ...retrievedBlogs,\r\n                ]);\r\n\r\n                setLoading(false);\r\n            } else {\r\n                setUserExists(false);\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    }, [profileId]);\r\n\r\n    return loading ? (\r\n        <div className=\"loading-animation\">{loadingAnimation}</div>\r\n    ) : (\r\n        <div\r\n            className={\r\n                'profile ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'profile-dark'\r\n                    : '')\r\n            }\r\n            style={{\r\n                marginTop:\r\n                    profileInfo && profileInfo.headerimage ? '0px' : '50px',\r\n            }}\r\n        >\r\n            {profileInfo && profileInfo.headerimage ? (\r\n                <div className=\"header-image\">\r\n                    <img src={profileInfo.headerimage} alt=\"\" />\r\n                </div>\r\n            ) : null}\r\n\r\n            <div className=\"content-container\">\r\n                <div className=\"profile\">\r\n                    <div className=\"profile-picture\">\r\n                        <img\r\n                            src={\r\n                                profileInfo && profileInfo.profileimage\r\n                                    ? profileInfo.profileimage\r\n                                    : 'https://www.pngitem.com/pimgs/m/150-1503941_user-windows-10-user-icon-png-transparent-png.png'\r\n                            }\r\n                            alt=\"\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* check user id and display buttons accordingly */}\r\n                    {+profileId === userState.client!.profile.userId ? (\r\n                        <Link to=\"/settings\">\r\n                            <button className=\"follow-btn\">Edit Profile</button>\r\n                        </Link>\r\n                    ) : userState &&\r\n                      userState.client?.profile.usersFollowed.includes(\r\n                          +profileId\r\n                      ) ? (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    unfollowUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    followUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                    <div className=\"profile-info\">\r\n                        <h1 className=\"user-name\">\r\n                            {profileInfo.firstName} {profileInfo.lastName}\r\n                        </h1>\r\n                        <p className=\"related-field\">\r\n                            {profileInfo.interest} {profileInfo.workplace}\r\n                        </p>\r\n\r\n                        <div className=\"profile-stats\">\r\n                            <span\r\n                                className=\"follower-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('followers'));\r\n                                }}\r\n                            >\r\n                                <strong>{profileInfo.userFollowers}</strong>{' '}\r\n                                Followers\r\n                            </span>\r\n                            <span className=\"blog-stat\">\r\n                                <strong>{profileBlogs.length}</strong> Blogs\r\n                            </span>\r\n                            <span\r\n                                className=\"following-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('following'));\r\n                                }}\r\n                            >\r\n                                <strong>\r\n                                    {profileInfo.usersFollowed.length +\r\n                                        profileInfo.topicsFollowed.length}\r\n                                </strong>{' '}\r\n                                Following\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Profile Navigation */}\r\n                    {+profileId === userState.client?.profile.userId ? (\r\n                        <ProfileNavigation\r\n                            currentProfileNavigation={currentProfileNavigation}\r\n                            setCurrentProfileNavigation={\r\n                                setCurrentProfileNavigation\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <hr />\r\n                    )}\r\n\r\n                    {currentProfileNavigation === 'blogs' ? (\r\n                        <Suspense fallback={loadingAnimation}>\r\n                            <ProfileBlogs profileBlogs={profileBlogs} />\r\n                        </Suspense>\r\n                    ) : currentProfileNavigation === 'bookmarks' ? (\r\n                        <Suspense fallback={loadingAnimation}>\r\n                            <ProfileBookmarks />\r\n                        </Suspense>\r\n                    ) : (\r\n                        <Suspense fallback={loadingAnimation}>\r\n                            <ProfileDrafts />\r\n                        </Suspense>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx",["239"],"import React from 'react';\r\nimport ProfileSettings from './Profile/ProfileSettings';\r\nimport './settings.css';\r\nimport { Link, NavLink, Route } from 'react-router-dom';\r\nimport AccountSettings from './Account/AccountSettings';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\nimport About from './About/About';\r\n\r\nconst Settings = () => {\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'settings ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'settings-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <h1>Settings</h1>\r\n            {/* <Link to=\"/settings/account\">account settings</Link>|\r\n            <Link to=\"/settings/\">profile settings</Link> */}\r\n            <div className=\"settings-container\">\r\n                <div className=\"setting-links\">\r\n                    <ul className=\"links\">\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/\"\r\n                            >\r\n                                Profile\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/account\"\r\n                            >\r\n                                Account\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                to=\"/settings/about\"\r\n                            >\r\n                                About\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"setting-content\">\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/\"\r\n                        component={ProfileSettings}\r\n                    />\r\n\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/account\"\r\n                        component={AccountSettings}\r\n                    />\r\n\r\n                    <Route exact path=\"/settings/about\" component={About} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx",["240","241","242","243","244"],"import React, { useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeTheme } from 'src/redux/Actions/applicationActions';\r\nimport {\r\n    updateUserBannerImage,\r\n    updateUserProfile,\r\n    updateUserProfileImage,\r\n} from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profileSettings.css';\r\n\r\nconst ProfileSettings = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const dispatch = useDispatch();\r\n\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    // extract the profile information from redux state\r\n    const accessToken = userState && userState.client?.accessToken;\r\n    const profile = userState && userState.client!.profile;\r\n    const [profileData, setProfileData] = useState({\r\n        firstName: profile.firstName,\r\n        lastName: profile.lastName,\r\n        interest: profile.interest,\r\n        workplace: profile.workplace,\r\n        bio: profile.bio,\r\n        profileImage: profile.profileImage,\r\n        profileHeader: profile.headerImage,\r\n    });\r\n\r\n    const handleChange = (e: any) => {\r\n        setProfileData({\r\n            ...profileData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        dispatch(updateUserProfile(profileData, accessToken!));\r\n    };\r\n\r\n    // image preview states\r\n    const [profilePreview, setProfilePreview] = useState<\r\n        string | ArrayBuffer | null | undefined | any\r\n    >(profile.profileImage);\r\n    const [bannerPreview, setBannerPreview] = useState<\r\n        string | ArrayBuffer | null | undefined | any\r\n    >(profile.headerImage);\r\n\r\n    // image preview error states\r\n    const [profileImageError, setProfileImageError] = useState<\r\n        string | null | undefined\r\n    >(null);\r\n    const [bannerImageError, setBannerImageError] = useState<\r\n        string | null | undefined\r\n    >(null);\r\n\r\n    // input file references\r\n    const profileUpload = useRef<any>(null);\r\n    const bannerUpload = useRef<any>(null);\r\n\r\n    // takes either profileUpload or bannerUpload reference object\r\n    const openImageUploader = (uploader: React.MutableRefObject<any>) => {\r\n        uploader.current!.click();\r\n    };\r\n\r\n    /**\r\n     * Handles ImageUpload preview for both the profile and the banner.\r\n     * @param previewState - Takes in useState object as the parameter. Determines which state it is that need to preview the image uploaded.\r\n     * @param errorState -  Takes in useState object as the parameter. Determines which state it is that needs to hold the error returned by image uploader.\r\n     */\r\n    const handleFileInputChange = (\r\n        e: any,\r\n        previewState: React.Dispatch<\r\n            React.SetStateAction<string | ArrayBuffer | null | undefined>\r\n        >,\r\n        errorState: React.Dispatch<\r\n            React.SetStateAction<string | null | undefined>\r\n        >\r\n    ) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                errorState('The uploaded file must be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                errorState('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            uploadImage(file, previewState);\r\n            errorState(null);\r\n        }\r\n    };\r\n\r\n    const uploadImage = (\r\n        file: Blob,\r\n        previewState: React.Dispatch<\r\n            React.SetStateAction<string | ArrayBuffer | null | undefined>\r\n        >\r\n    ) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            // previewState(reader.result);\r\n            if (previewState == setProfilePreview) {\r\n                dispatch(updateUserProfileImage(reader.result, accessToken));\r\n            } else {\r\n                dispatch(updateUserBannerImage(reader.result, accessToken));\r\n            }\r\n        };\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'profile-settings ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'profile-settings-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">theme</h2>\r\n                <p className=\"section-description\">\r\n                    Select a theme for you application. Your preference will be\r\n                    saved automatically.\r\n                </p>\r\n\r\n                <div className=\"themes\">\r\n                    <div\r\n                        className=\"theme light-theme\"\r\n                        onClick={() => {\r\n                            dispatch(changeTheme('light'));\r\n                        }}\r\n                    >\r\n                        <span>Light</span>\r\n                    </div>\r\n                    <div\r\n                        onClick={() => {\r\n                            dispatch(changeTheme('dark'));\r\n                        }}\r\n                        className=\"theme dark-theme\"\r\n                    >\r\n                        <span>Dark</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* profile image */}\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">your profile</h2>\r\n                <p className=\"section-description\">Profile Picture</p>\r\n                <div className=\"profile-pictures\">\r\n                    <div\r\n                        className=\"change-profile\"\r\n                        onClick={() => {\r\n                            openImageUploader(profileUpload);\r\n                        }}\r\n                    >\r\n                        <span>Click here to change your profile</span>\r\n                    </div>\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"profileImage\"\r\n                        ref={profileUpload}\r\n                        style={{ display: 'none' }}\r\n                        onChange={e => {\r\n                            handleFileInputChange(\r\n                                e,\r\n                                setProfilePreview,\r\n                                setProfileImageError\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* checking if profile picture has been uploaded */}\r\n                    {profileData.profileImage ? (\r\n                        <div className=\"profile\">\r\n                            <img\r\n                                src={profileData.profileImage}\r\n                                alt=\"profile image\"\r\n                            />\r\n                        </div>\r\n                    ) : null}\r\n\r\n                    <strong className=\"error-message\">\r\n                        {profileImageError}\r\n                    </strong>\r\n                </div>\r\n\r\n                {/* header image */}\r\n                <p className=\"section-description\">Header Image</p>\r\n                <div className=\"header-images\">\r\n                    <div\r\n                        className=\"change-header\"\r\n                        onClick={() => {\r\n                            openImageUploader(bannerUpload);\r\n                        }}\r\n                    >\r\n                        Click here to change your header\r\n                    </div>\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"bannerImage\"\r\n                        ref={bannerUpload}\r\n                        style={{ display: 'none' }}\r\n                        onChange={e => {\r\n                            handleFileInputChange(\r\n                                e,\r\n                                setBannerPreview,\r\n                                setBannerImageError\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* checking if banner image has been uploaded */}\r\n                    {profileData.profileHeader ? (\r\n                        <div className=\"header\">\r\n                            <img\r\n                                src={profileData.profileHeader}\r\n                                alt=\"banner image\"\r\n                            />\r\n                        </div>\r\n                    ) : null}\r\n\r\n                    <strong className=\"error-message\">\r\n                        {bannerImageError}\r\n                    </strong>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">about you</h2>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"name-input\" className=\"section-description\">\r\n                        First Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"name-input\"\r\n                        placeholder=\"Your First Name\"\r\n                        value={profileData.firstName}\r\n                        name=\"firstName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"last-name-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Last Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"last-name-input\"\r\n                        placeholder=\"Your Last Name\"\r\n                        value={profileData.lastName}\r\n                        name=\"lastName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"interest-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Interest/ Education\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"What do you do?/ What are you interested in?\"\r\n                        value={profileData.interest}\r\n                        name=\"interest\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"workplace-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Workplace\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"Where do you work?\"\r\n                        value={profileData.workplace}\r\n                        name=\"workplace\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label htmlFor=\"bio-input\" className=\"section-description\">\r\n                        Bio\r\n                    </label>\r\n                    <textarea\r\n                        className=\"bio-input\"\r\n                        id=\"\"\r\n                        cols={30}\r\n                        rows={5}\r\n                        placeholder=\"Write something about yourself\"\r\n                        value={profileData.bio}\r\n                        name=\"bio\"\r\n                        onChange={handleChange}\r\n                    ></textarea>\r\n\r\n                    <p\r\n                        className={\r\n                            `bio-length ` +\r\n                            (profileData.bio.length >= 200\r\n                                ? 'bio-length-red'\r\n                                : '')\r\n                        }\r\n                    >\r\n                        {profileData.bio.length}/200\r\n                    </p>\r\n\r\n                    <button\r\n                        className=\"save-btn\"\r\n                        disabled={profileData.bio.length > 200}\r\n                    >\r\n                        Save Changes\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx",["245","246"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { showSuccessToast } from '../Utils/ToastNotification';\r\nimport './editor.css';\r\nimport Wysiwyg from './Wysiwyg/Wysiwyg';\r\n\r\nconst EditorPage = (props: any) => {\r\n    const history = useHistory();\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n    //\r\n    const [blogTitle, setBlogTitle] = useState<string | null>(null);\r\n    const [blogTopics, setBlogTopics] = useState<\r\n        Array<{ topic_id: number; topic_image: string; topic_title: string }>\r\n    >([]);\r\n    const [selectedTopic, setSelectedTopic] = useState<number | null>(null);\r\n\r\n    // image preview and error\r\n    const imageUpload = useRef<any>(null);\r\n\r\n    const [previewSource, setPreviewSource] = useState<any>(null);\r\n    const [imageError, setImageError] = useState<string | null>(null);\r\n\r\n    // editor state, onchange functions\r\n    const [editorHTML, setEditorHTML] = useState();\r\n    const [editorError, setEditorError] = useState<string | null>(null);\r\n\r\n    // image uploader and previewer\r\n    const openFileUploader = (): void => {\r\n        imageUpload.current!.click();\r\n    };\r\n\r\n    //\r\n    const draftId = props.match.params.id;\r\n\r\n    const handleFileInputChange = (e: any): void => {\r\n        const file = e.target.files![0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                setImageError('The uploaded file has to be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                setImageError('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            setImageError(null);\r\n            previewImage(file);\r\n        }\r\n    };\r\n\r\n    const previewImage = (file: Blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const removePreviewImage = () => {\r\n        setPreviewSource(null);\r\n    };\r\n\r\n    // blog submission and validation\r\n    const handleSubmit = () => {\r\n        if (!blogTitle) {\r\n            setEditorError('Your blog must have a title.');\r\n        } else if (!previewSource) {\r\n            setEditorError('You must upload an image.');\r\n        } else if (!selectedTopic) {\r\n            setEditorError('You must select a topic.');\r\n        } else if (!editorHTML) {\r\n            setEditorError('Your blog cannot be empty.');\r\n        } else {\r\n            setEditorError(null);\r\n            // dispatch(openModal('uploadBlog'));\r\n\r\n            // upload the blog\r\n            uploadBlog();\r\n        }\r\n    };\r\n\r\n    const saveAsDraft = async () => {\r\n        const draftingURL = draftId\r\n            ? `/blog/updateDraft/${draftId}`\r\n            : '/blog/saveDraft';\r\n\r\n        if (!blogTitle) {\r\n            setEditorError('Your draft must have a title.');\r\n        } else {\r\n            const draftData = {\r\n                draftTitle: blogTitle,\r\n                draftContent: editorHTML,\r\n            };\r\n\r\n            const res = await fetch(draftingURL, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n                body: JSON.stringify(draftData),\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                showSuccessToast('Draft Successfully Saved.');\r\n                history.push(\r\n                    `/user/${userState && userState.client?.profile.userId}`\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const uploadBlog = async () => {\r\n        const blogData = {\r\n            blogTitle,\r\n            blogContent: editorHTML,\r\n            topicId: selectedTopic,\r\n            encodedImage: previewSource,\r\n        };\r\n\r\n        const res = await fetch('blog/postBlog', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: `bearer ${\r\n                    userState && userState.client?.accessToken\r\n                }`,\r\n            },\r\n            body: JSON.stringify(blogData),\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            showSuccessToast('Blog Successfully Published.');\r\n            history.push(\r\n                `/user/${userState && userState.client?.profile.userId}`\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await fetch('/blog/getTopics');\r\n            const data = await res.json();\r\n            setBlogTopics(data.data);\r\n        })();\r\n    }, []);\r\n\r\n    // fetch draft contents in case it was a draft\r\n    useEffect(() => {\r\n        async function getDraft() {\r\n            const res = await fetch(`/blog/getDraft/${draftId}`, {\r\n                headers: {\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                setBlogTitle(data.draft.draft_title);\r\n                setEditorHTML(data.draft.draft_content);\r\n            }\r\n        }\r\n\r\n        if (draftId) {\r\n            getDraft();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'editor-page ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'editor-page-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <input\r\n                type=\"text\"\r\n                className=\"story-title\"\r\n                placeholder=\"Title your Story...\"\r\n                onChange={e => {\r\n                    setBlogTitle(e.target.value);\r\n                }}\r\n                value={blogTitle || ''}\r\n            />\r\n\r\n            <input\r\n                type=\"file\"\r\n                name=\"image\"\r\n                ref={imageUpload}\r\n                style={{ display: 'none' }}\r\n                onChange={handleFileInputChange}\r\n            />\r\n\r\n            {previewSource ? (\r\n                <div className=\"header-image\">\r\n                    <svg\r\n                        onClick={removePreviewImage}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                    >\r\n                        <path d=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\" />\r\n                    </svg>\r\n                    <img src={previewSource} alt=\"Header Image\" />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div\r\n                        className=\"header-image-placeholder\"\r\n                        onClick={openFileUploader}\r\n                    >\r\n                        <p>Click here to upload a header.</p>\r\n                    </div>\r\n                    <p className=\"error-message\">{imageError && imageError}</p>\r\n                </div>\r\n            )}\r\n\r\n            <label className=\"topic-label\" htmlFor=\"blog-topic\">\r\n                Select a topic for your blog:{' '}\r\n            </label>\r\n            <select\r\n                id=\"blog-topic\"\r\n                onChange={(e: any) => {\r\n                    setSelectedTopic(+e.target.value);\r\n                }}\r\n            >\r\n                <option id=\"blog-option\" selected disabled>\r\n                    Select a topic\r\n                </option>\r\n                {blogTopics.map(topic => (\r\n                    <option key={topic.topic_id} value={topic.topic_id}>\r\n                        {topic.topic_title}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <p className=\"error-message\">{editorError && editorError}</p>\r\n\r\n            <Wysiwyg\r\n                setEditorHTML={setEditorHTML}\r\n                editorHTML={editorHTML}\r\n                handleSubmit={handleSubmit}\r\n                draftId={null}\r\n                saveAsDraft={saveAsDraft}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx",["247"],"import { motion } from 'framer-motion';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { openModal } from 'src/redux/Actions/applicationActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './dropdown.css';\r\n\r\nconst Dropdown = ({\r\n    setDropdown,\r\n}: {\r\n    dropdown: boolean;\r\n    setDropdown: React.SetStateAction<any>;\r\n}) => {\r\n    //\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const dropdownLinks = [\r\n        {\r\n            title: 'Profile',\r\n            to: `/user/${userState && userState.client?.profile.userId}`,\r\n        },\r\n        {\r\n            title: 'My Blogs',\r\n            to: `/user/${userState && userState.client?.profile.userId}`,\r\n        },\r\n        {\r\n            title: 'My Drafts',\r\n            to: `/user/drafts/${userState && userState.client?.profile.userId}`,\r\n        },\r\n        { title: 'Settings', to: '/settings' },\r\n    ];\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'dropdown ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'dropdown-dark'\r\n                    : '')\r\n            }\r\n            onMouseEnter={() => {\r\n                setDropdown(true);\r\n            }}\r\n            onMouseLeave={() => {\r\n                setDropdown(false);\r\n            }}\r\n        >\r\n            <div className=\"profile\">\r\n                <div className=\"user-info\">\r\n                    <p className=\"user-name\">\r\n                        {userState && userState.client?.profile.firstName}{' '}\r\n                        {userState && userState.client?.profile.lastName}\r\n                    </p>\r\n                    <p className=\"user-interest\">\r\n                        {userState && userState.client?.profile?.interest}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <ul className=\"dropdown-links\">\r\n                {dropdownLinks.map(link => (\r\n                    <li key={link.title}>\r\n                        <Link className=\"link\" to={link.to}>\r\n                            {link.title}\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <hr />\r\n\r\n            <button\r\n                className=\"sign-out\"\r\n                onClick={() => {\r\n                    dispatch(openModal('logout'));\r\n                }}\r\n            >\r\n                Sign out\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dropdown;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts",["248","249"],"import { StringMappingType } from 'typescript';\r\n\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_FAILED = 'USER_FAILED';\r\nexport const USER_SUCCESS = 'USER_SUCCESS';\r\nexport const USER_LOGIN_FAILED = 'LOGIN_FAILED';\r\nexport const USER_LOGGED_OUT = 'USER_LOGGED_OUT';\r\nexport const TOKEN_FAILED = 'TOKEN_SUCCESS';\r\nexport const USER_PROFILE_UPDATED = 'USER_PROFILE_UPDATED';\r\nexport const USER_ACCOUNT_UPDATED = 'USER_ACCOUNT_UPDATED';\r\nexport const USER_FOLLOWED = 'FOLLOW_USER';\r\nexport const USER_UNFOLLOWED = 'FOLLOW_USER';\r\nexport const TOPIC_FOLLOWED = 'TOPIC_FOLLOWED';\r\nexport const TOPIC_UNFOLLOWED = 'TOPIC_UNFOLLOWED';\r\nexport const USER_PROFILE_PICTURE_UPDATED = 'USER_PROFILE_PICTURE_UPDATED';\r\nexport const USER_BANNER_PICTURE_UPDATED = 'USER_BANNER_PICTURE_UPDATED';\r\nexport const TOGGLE_BOOKMARK = 'TOGGLE_BOOKMARK';\r\n\r\nexport type UserType = {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    interest: string;\r\n    workplace: string;\r\n    bio: string;\r\n    usersFollowed: number[];\r\n    topicsFollowed: number[];\r\n    profileImage: string | null;\r\n    headerImage: string | null;\r\n    bookmarks: number[] | null;\r\n};\r\n\r\nexport type UserProfileType = {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    bio: string;\r\n    workplace: string;\r\n};\r\n\r\ntype LoginErrorType = {\r\n    message: string;\r\n};\r\n\r\nexport type LoginDataType = {\r\n    profile: UserType;\r\n    accessToken: string;\r\n};\r\n\r\nexport interface UserLoading {\r\n    type: typeof USER_LOADING;\r\n}\r\n\r\nexport interface UserFailed {\r\n    type: typeof USER_FAILED;\r\n}\r\n\r\nexport interface UserSuccess {\r\n    type: typeof USER_SUCCESS;\r\n    payload: LoginDataType;\r\n}\r\n\r\nexport interface UserLoginFailed {\r\n    type: typeof USER_LOGIN_FAILED;\r\n    // payload: LoginErrorType;\r\n    payload: {\r\n        message: string;\r\n    };\r\n}\r\n\r\nexport interface UserLoggedOut {\r\n    type: typeof USER_LOGGED_OUT;\r\n}\r\n\r\nexport interface TokenRefreshFailed {\r\n    type: typeof TOKEN_FAILED;\r\n}\r\n\r\nexport interface UserProfileUpdated {\r\n    type: typeof USER_PROFILE_UPDATED;\r\n    payload: UserProfileType;\r\n}\r\n\r\nexport interface UserAccountUpdated {\r\n    type: typeof USER_ACCOUNT_UPDATED;\r\n    payload: { email: string };\r\n}\r\n\r\nexport interface UserFollowed {\r\n    type: typeof USER_FOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface UserUnfollowed {\r\n    type: typeof USER_UNFOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface TopicFollowed {\r\n    type: typeof TOPIC_FOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface TopicUnfollowed {\r\n    type: typeof TOPIC_UNFOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface UserProfilePictureUpdated {\r\n    type: typeof USER_PROFILE_PICTURE_UPDATED;\r\n    payload: string;\r\n}\r\n\r\nexport interface UserBannerPictureUpdated {\r\n    type: typeof USER_BANNER_PICTURE_UPDATED;\r\n    payload: string;\r\n}\r\n\r\nexport interface ToggleBookmark {\r\n    type: typeof TOGGLE_BOOKMARK;\r\n    payload: number[] | null;\r\n}\r\n\r\nexport type UserDispatchType =\r\n    | UserLoading\r\n    | UserFailed\r\n    | UserSuccess\r\n    | UserLoginFailed\r\n    | UserLoggedOut\r\n    | TokenRefreshFailed\r\n    | UserProfileUpdated\r\n    | UserAccountUpdated\r\n    | UserFollowed\r\n    | UserUnfollowed\r\n    | TopicFollowed\r\n    | TopicUnfollowed\r\n    | UserProfilePictureUpdated\r\n    | UserBannerPictureUpdated\r\n    | ToggleBookmark;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts",["250"],"import { useHistory } from 'react-router-dom';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    showFailureToast,\r\n    showSuccessToast,\r\n} from 'src/components/Utils/ToastNotification';\r\nimport {\r\n    USER_FAILED,\r\n    USER_SUCCESS,\r\n    USER_LOGIN_FAILED,\r\n    UserDispatchType,\r\n    USER_LOGGED_OUT,\r\n    TOKEN_FAILED,\r\n    UserProfileType,\r\n    USER_PROFILE_UPDATED,\r\n    USER_ACCOUNT_UPDATED,\r\n    USER_FOLLOWED,\r\n    USER_UNFOLLOWED,\r\n    TOPIC_FOLLOWED,\r\n    TOPIC_UNFOLLOWED,\r\n    USER_PROFILE_PICTURE_UPDATED,\r\n    USER_BANNER_PICTURE_UPDATED,\r\n    TOGGLE_BOOKMARK,\r\n} from './userActionTypes';\r\n\r\nexport const loginUser =\r\n    (user: object) => async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            // dispatch({\r\n            //     type: USER_LOADING,\r\n            // });\r\n\r\n            const res = await fetch('/user/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_SUCCESS,\r\n                    payload: {\r\n                        accessToken: data.accessToken,\r\n                        profile: data.user,\r\n                    },\r\n                });\r\n                localStorage.setItem('userLoggedIn', 'true');\r\n            } else {\r\n                dispatch({\r\n                    type: USER_LOGIN_FAILED,\r\n                    payload: data.error,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_FAILED,\r\n            });\r\n        }\r\n    };\r\n\r\nexport const refreshToken =\r\n    () => async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            // dispatch({\r\n            //     type: USER_LOADING,\r\n            // });\r\n            const res = await fetch('/user/refreshToken', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_SUCCESS,\r\n                    payload: {\r\n                        accessToken: data.accessToken,\r\n                        profile: data.user,\r\n                    },\r\n                });\r\n                localStorage.setItem('userLoggedIn', 'true');\r\n            } else {\r\n                dispatch({\r\n                    type: TOKEN_FAILED,\r\n                    payload: data.error,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            dispatch({\r\n                type: USER_FAILED,\r\n            });\r\n        }\r\n    };\r\n\r\nexport const logOutUser = async (dispatch: Dispatch<UserDispatchType>) => {\r\n    const res = await fetch('/user/clearToken', {\r\n        credentials: 'include',\r\n    });\r\n\r\n    const data = await res.json();\r\n    if (data.ok) {\r\n        dispatch({\r\n            type: USER_LOGGED_OUT,\r\n        });\r\n        localStorage.setItem('userLoggedIn', 'false');\r\n        window.location.replace('/');\r\n    }\r\n};\r\n\r\nexport const updateUserProfile =\r\n    (userProfile: UserProfileType, accessToken: string) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch('/user/updateUserProfile', {\r\n                method: 'POST',\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(userProfile),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_PROFILE_UPDATED,\r\n                    payload: data.user,\r\n                });\r\n                showSuccessToast('Profile Successfully Updated!');\r\n            }\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const updateUserAccount =\r\n    (userAccount: Object, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch('/user/updateUserAccount', {\r\n                method: 'POST',\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(userAccount),\r\n            });\r\n\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_ACCOUNT_UPDATED,\r\n                    payload: data.user,\r\n                });\r\n                showSuccessToast('Account Successfully Updated!');\r\n            } else if (\r\n                !data.ok &&\r\n                data.error.message === 'Incorrect credentials.'\r\n            ) {\r\n                showFailureToast('Incorrect credentials. Please try again');\r\n            }\r\n\r\n            //\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const followUser =\r\n    (userId: number, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch(`/user/followUser/${userId}`, {\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_FOLLOWED,\r\n                    payload: data.newList,\r\n                });\r\n                showSuccessToast('User Followed!');\r\n            }\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const unfollowUser =\r\n    (userId: number, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch(`/user/unfollowUser/${userId}`, {\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_UNFOLLOWED,\r\n                    payload: data.newList,\r\n                });\r\n                showSuccessToast('User Unfollowed!');\r\n            }\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const followTopic =\r\n    (topicId: number, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch(`/blog/followTopic/${topicId}`, {\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: TOPIC_FOLLOWED,\r\n                    payload: data.topics,\r\n                });\r\n                showSuccessToast('Topic Followed!');\r\n            }\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const unfollowTopic =\r\n    (topicId: number, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch(`/blog/unfollowTopic/${topicId}`, {\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: TOPIC_UNFOLLOWED,\r\n                    payload: data.topics,\r\n                });\r\n                showSuccessToast('Topic Unfollowed!');\r\n            }\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const updateUserProfileImage =\r\n    (\r\n        encodedImage: string | ArrayBuffer | null,\r\n        accessToken: string | undefined\r\n    ) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch('/user/updateProfileImage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    encodedImage,\r\n                }),\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_PROFILE_PICTURE_UPDATED,\r\n                    payload: data.user.profileImage,\r\n                });\r\n                showSuccessToast('Profile Picture Updated!');\r\n            }\r\n            //\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const updateUserBannerImage =\r\n    (\r\n        encodedImage: string | ArrayBuffer | null,\r\n        accessToken: string | undefined\r\n    ) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch('/user/updateBannerImage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify({\r\n                    encodedImage,\r\n                }),\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: USER_BANNER_PICTURE_UPDATED,\r\n                    payload: data.user.headerImage,\r\n                });\r\n                showSuccessToast('Banner Updated!');\r\n            }\r\n            //\r\n        } catch (error) {}\r\n    };\r\n\r\nexport const toggleBookmark =\r\n    (id: number, status: string, accessToken: string | undefined) =>\r\n    async (dispatch: Dispatch<UserDispatchType>) => {\r\n        try {\r\n            const res = await fetch(`/blog/toggleBookmark/${id}/${status}`, {\r\n                headers: {\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n                credentials: 'include',\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                dispatch({\r\n                    type: TOGGLE_BOOKMARK,\r\n                    payload: data.bookmarks,\r\n                });\r\n                let successMessage;\r\n                if (status === 'array_append') {\r\n                    successMessage = 'Bookmark saved!';\r\n                } else {\r\n                    successMessage = 'Bookmark unsaved!';\r\n                }\r\n                showSuccessToast(successMessage);\r\n            }\r\n\r\n            //\r\n        } catch (error) {}\r\n    };\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx",["251","252"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logoutIcon } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { logOutUser } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport './logoutModal.css';\r\nimport { animationPrefixes } from '../ModalContainer';\r\n\r\nconst LogoutModal = () => {\r\n    const dispatch = useDispatch();\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <motion.div\r\n            className={\r\n                'logout-modal ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'logout-modal-dark'\r\n                    : '')\r\n            }\r\n            initial={animationPrefixes.initial}\r\n            animate={animationPrefixes.animate}\r\n            transition={animationPrefixes.transition}\r\n            exit={animationPrefixes.exit}\r\n        >\r\n            <div className=\"icon-section\">{logoutIcon}</div>\r\n\r\n            <div className=\"content-section\">\r\n                <h2>Are you sure you want to log out?</h2>\r\n                <p>\r\n                    You will have to enter the credentials again before you can\r\n                    log back in.\r\n                </p>\r\n\r\n                <button\r\n                    className=\"logout-btn\"\r\n                    onClick={() => {\r\n                        dispatch(logOutUser);\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Log Out\r\n                </button>\r\n                <button\r\n                    className=\"cancel-btn\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default LogoutModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx",["253"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { closeIcon, loadingAnimation } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './infoModal.css';\r\nimport TopicsInfoContainer from './TopicsInfoContainer';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport UsersInfoContainer from './UsersInfoContainer';\r\nimport { animationPrefixes } from '../ModalContainer';\r\n\r\nexport interface infoUserInterface {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    profileImage: string | undefined | null;\r\n}\r\n\r\nexport interface infoTopicInterface {\r\n    topicId: number;\r\n    topicTitle: string;\r\n    topicImage: string;\r\n}\r\n\r\nconst InfoModal = ({ infoType }: { infoType: String }) => {\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const currentURL = window.location.href;\r\n    const urlElements = currentURL.split('/');\r\n    const profileId = +urlElements[urlElements.length - 1];\r\n\r\n    const infoEndPoint =\r\n        infoType === 'Following'\r\n            ? `/user/getFollowing/${profileId}`\r\n            : `/user/getFollowers/${profileId}`;\r\n\r\n    const [users, setUsers] = useState<infoUserInterface[]>([]);\r\n    const [topics, setTopics] = useState<infoTopicInterface[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // current navigation of the profile modal: People | Topics\r\n    const [currentInfo, setCurrentInfo] = useState('People');\r\n\r\n    useEffect(() => {\r\n        if (currentInfo === 'People') {\r\n            // set users to empty array to avoid duplicate entries in the array = )\r\n            setUsers([]);\r\n            setLoading(true);\r\n            (async function getUsers() {\r\n                //\r\n                const res = await fetch(infoEndPoint);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.profileUsers.forEach((u: any) => {\r\n                        const newUser: infoUserInterface = {\r\n                            userId: u.user_id,\r\n                            firstName: u.first_name,\r\n                            lastName: u.last_name,\r\n                            profileImage: u.profileimage,\r\n                        };\r\n                        setUsers(users => [...users, newUser]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n        } else {\r\n            // set topics to empty array too\r\n            setTopics([]);\r\n            setLoading(true);\r\n\r\n            (async function getTopics() {\r\n                //\r\n                const res = await fetch(`/blog/getFollowingBlogs/${profileId}`);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.topics.forEach((topic: any) => {\r\n                        const newTopic: infoTopicInterface = {\r\n                            topicId: topic.topic_id,\r\n                            topicTitle: topic.topic_title,\r\n                            topicImage: topic.topic_image,\r\n                        };\r\n\r\n                        setTopics(topics => [...topics, newTopic]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n            //\r\n        }\r\n        //\r\n    }, [currentInfo]);\r\n\r\n    return (\r\n        <AnimatePresence>\r\n            <motion.div\r\n                className={\r\n                    'info-modal ' +\r\n                    (applicationState &&\r\n                    applicationState.applicationTheme === 'dark'\r\n                        ? 'info-modal-dark'\r\n                        : '')\r\n                }\r\n                initial={animationPrefixes.initial}\r\n                animate={animationPrefixes.animate}\r\n                transition={animationPrefixes.transition}\r\n                exit={animationPrefixes.exit}\r\n            >\r\n                <span\r\n                    className=\"close-modal\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    {closeIcon}\r\n                </span>\r\n                <h3 className=\"info-title\">{infoType}</h3>\r\n\r\n                {/* Only display info navigaton when on following modal, not on follower modal */}\r\n                {infoType === 'Following' ? (\r\n                    <div className=\"info-navigation\">\r\n                        <div\r\n                            className={\r\n                                'info-topic ' +\r\n                                (currentInfo === 'People' ? 'active-topic' : '')\r\n                            }\r\n                        >\r\n                            <span\r\n                                className=\"topic-title\"\r\n                                onClick={() => {\r\n                                    setCurrentInfo('People');\r\n                                }}\r\n                            >\r\n                                People\r\n                            </span>\r\n                        </div>\r\n                        <div\r\n                            className={\r\n                                'info-topic ' +\r\n                                (currentInfo === 'Topic' ? 'active-topic' : '')\r\n                            }\r\n                        >\r\n                            <span\r\n                                className=\"topic-title\"\r\n                                onClick={() => {\r\n                                    setCurrentInfo('Topic');\r\n                                }}\r\n                            >\r\n                                Topics\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n\r\n                {/* checking which navigation is open at the moment */}\r\n                {loading ? (\r\n                    <div className=\"svg-container\">\r\n                        <span className=\"loading-svg\">{loadingAnimation}</span>\r\n                    </div>\r\n                ) : currentInfo === 'People' ? (\r\n                    <UsersInfoContainer users={users} />\r\n                ) : (\r\n                    <TopicsInfoContainer topics={topics} />\r\n                )}\r\n            </motion.div>\r\n        </AnimatePresence>\r\n    );\r\n};\r\n\r\nexport default InfoModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Reader.tsx",["254","255"],"import React, { useEffect, useState, Suspense, lazy } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { loadingAnimation } from 'src/assets/SVGs';\r\nimport { RootStore } from 'src/redux/store';\r\n// import Comments from './Comments/Comments';\r\nimport './reader.css';\r\nimport ReaderBlog from './ReaderBlog';\r\n// import ReaderUserInfo from './ReaderUserInfo';\r\nconst Comments = lazy(() => import('./Comments/Comments'));\r\n\r\ninterface blogInterface {\r\n    title: string;\r\n    blogContent: string;\r\n    headerImage: string;\r\n    createdAt: string;\r\n    likes: number[] | null;\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    profileImage: string | null;\r\n    interest: string | null;\r\n}\r\n\r\nconst Reader = (props: any) => {\r\n    const { id: blogId } = props.match.params;\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const [blog, setBlog] = useState<blogInterface | null>();\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        (async function getBlog() {\r\n            const res = await fetch(`/blog/getBlog/${blogId}`);\r\n            if (res.status === 404) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                const responseBlog = data.blog;\r\n                setBlog({\r\n                    title: responseBlog.title,\r\n                    blogContent: responseBlog.blog_content,\r\n                    headerImage: responseBlog.header_image,\r\n                    createdAt: responseBlog.created_at,\r\n                    likes: responseBlog.likes,\r\n                    userId: responseBlog.user_id,\r\n                    firstName: responseBlog.first_name,\r\n                    lastName: responseBlog.last_name,\r\n                    profileImage: responseBlog.profileimage,\r\n                    interest: responseBlog.interest,\r\n                });\r\n                setLoading(false);\r\n            }\r\n\r\n            //\r\n        })();\r\n    }, []);\r\n\r\n    return loading ? (\r\n        <div className=\"loading-animation\">{loadingAnimation}</div>\r\n    ) : !loading && !blog ? (\r\n        <div>no blog found</div>\r\n    ) : (\r\n        <div\r\n            className={\r\n                'reader-container ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'reader-container-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <div className=\"blog-container\">\r\n                <ReaderBlog\r\n                    blogId={blogId}\r\n                    title={blog!.title}\r\n                    blogContent={blog!.blogContent}\r\n                    headerImage={blog!.headerImage}\r\n                    createdAt={blog!.createdAt}\r\n                    likes={blog!.likes}\r\n                    userId={blog!.userId}\r\n                    firstName={blog!.firstName}\r\n                    lastName={blog!.lastName}\r\n                    interest={blog!.interest}\r\n                    profileImage={blog!.profileImage}\r\n                />\r\n\r\n                <Suspense fallback={loadingAnimation}>\r\n                    <Comments blogId={blogId} blogAuthorId={blog!.userId} />\r\n                </Suspense>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Reader;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderBlog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comments.tsx",["256"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { pencilIcon } from 'src/assets/SVGs';\r\nimport { showSuccessToast } from 'src/components/Utils/ToastNotification';\r\nimport { RootStore } from 'src/redux/store';\r\nimport Comment from './Comment';\r\nimport './comments.css';\r\n\r\ninterface readerCommentInterface {\r\n    blogId: number;\r\n    blogAuthorId: number;\r\n}\r\n\r\nexport interface commentInterface {\r\n    userId: number;\r\n    profileImage: string | null;\r\n    firstName: string;\r\n    lastName: string;\r\n    commentId: number;\r\n    commentContent: string;\r\n    likedBy: number[] | null;\r\n    createdAt: string;\r\n}\r\n\r\nconst Comments = ({ blogId, blogAuthorId }: readerCommentInterface) => {\r\n    //\r\n    const [currentComment, setCurrentComment] = useState<string>('');\r\n    const [blogComments, setBlogComments] = useState<commentInterface[]>([]);\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const accessToken = userState.client?.accessToken;\r\n\r\n    const submitComment = async (e: any) => {\r\n        e.preventDefault();\r\n\r\n        const res = await fetch(`/blog/postComment/${blogId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: `bearer ${accessToken}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                commentContent: currentComment,\r\n                parentId: null,\r\n            }),\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (data.ok) {\r\n            const newComment: commentInterface = data.comment;\r\n            setBlogComments(blogComments => [newComment, ...blogComments]);\r\n\r\n            setCurrentComment('');\r\n        }\r\n    };\r\n\r\n    const deleteComment = async (commentId: number) => {\r\n        const res = await fetch(`/blog/deleteComment/${commentId}`, {\r\n            headers: {\r\n                authorization: `bearer ${accessToken}`,\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            setBlogComments(blogComments =>\r\n                blogComments.filter(comment => comment.commentId !== commentId)\r\n            );\r\n            showSuccessToast('Comment Removed!');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setBlogComments([]);\r\n\r\n        (async function getComments() {\r\n            const res = await fetch(`/blog/getComments/${blogId}`);\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                setBlogComments(data.comments);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'comments-container ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'comments-container-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <div className=\"comment-box\">\r\n                <form onSubmit={submitComment}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Add a comment\"\r\n                        onChange={e => {\r\n                            setCurrentComment(e.target.value);\r\n                        }}\r\n                        value={currentComment}\r\n                    />\r\n                </form>\r\n\r\n                <span onClick={submitComment}>{pencilIcon}</span>\r\n            </div>\r\n\r\n            {blogComments.map(com => (\r\n                <Comment\r\n                    key={com.commentId}\r\n                    comment={com}\r\n                    blogAuthorId={blogAuthorId}\r\n                    blogId={blogId}\r\n                    deleteComment={deleteComment}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderWysiwyg.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comment.tsx",["257","258","259"],"import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    crownIcon,\r\n    defaultProfileImage,\r\n    downArrowIcon,\r\n    heartFilledIcon,\r\n    heartStrokeIcon,\r\n    trashIcon,\r\n} from 'src/assets/SVGs';\r\nimport { showSuccessToast } from 'src/components/Utils/ToastNotification';\r\nimport { RootStore } from 'src/redux/store';\r\nimport ChildrenComment from './ChildrenComment';\r\nimport { commentInterface } from './Comments';\r\n\r\nconst Comment = ({\r\n    comment,\r\n    blogAuthorId,\r\n    blogId,\r\n    deleteComment,\r\n}: {\r\n    comment: commentInterface;\r\n    blogAuthorId: number;\r\n    blogId: number;\r\n    deleteComment: (commentId: number) => void;\r\n}) => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const accessToken = userState.client?.accessToken;\r\n\r\n    const [replyToggled, setReplyToggled] = useState<boolean>(false);\r\n    const [replyContent, setReplyContent] = useState<string>('');\r\n\r\n    const [currentComment, setCurrentComment] =\r\n        useState<commentInterface>(comment);\r\n\r\n    const [childrenToggled, setChildrenToggled] = useState<boolean>(false);\r\n    const [childrenNumber, setChildrenNumber] = useState<number | null>(0);\r\n    const [childrenComments, setChildrenComments] = useState<\r\n        commentInterface[]\r\n    >([]);\r\n\r\n    // find out number of replies a comment has.\r\n    useEffect(() => {\r\n        (async function calculateChildren() {\r\n            const res = await fetch(`/blog/countChildren/${comment.commentId}`);\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                setChildrenNumber(+data.children);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (childrenToggled) {\r\n            (async function getChildren() {\r\n                const res = await fetch(\r\n                    `/blog/getChildrenComment/${comment.commentId}`\r\n                );\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    setChildrenComments(data.comments);\r\n                }\r\n            })();\r\n        }\r\n    }, [childrenToggled]);\r\n\r\n    const toggleComment = async (status: string) => {\r\n        const res = await fetch(\r\n            `/blog/toggleComment/${comment.commentId}/${status}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    authorization: `bearer ${accessToken}`,\r\n                },\r\n            }\r\n        );\r\n        const data = await res.json();\r\n\r\n        if (data.ok) {\r\n            setCurrentComment({\r\n                ...currentComment,\r\n                likedBy: data.likedBy,\r\n            });\r\n        }\r\n    };\r\n\r\n    const postReply = async () => {\r\n        const res = await fetch(`/blog/postComment/${blogId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: `bearer ${accessToken}`,\r\n            },\r\n            body: JSON.stringify({\r\n                commentContent: replyContent,\r\n                parentId: comment.commentId,\r\n            }),\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            setChildrenComments(childrenComments => [\r\n                data.comment,\r\n                ...childrenComments,\r\n            ]);\r\n            setReplyContent('');\r\n            setReplyToggled(false);\r\n            setChildrenToggled(true);\r\n            setChildrenNumber(childrenNumber! + 1);\r\n        }\r\n    };\r\n\r\n    const deleteChildComment = async (commentId: number) => {\r\n        const res = await fetch(`/blog/deleteComment/${commentId}`, {\r\n            headers: {\r\n                authorization: `bearer ${accessToken}`,\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            setChildrenComments(childrenComments =>\r\n                childrenComments.filter(\r\n                    comment => comment.commentId !== commentId\r\n                )\r\n            );\r\n\r\n            showSuccessToast('Comment Removed!');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment\">\r\n            {/* display delete button if comment belongs to current user */}\r\n            {currentComment.userId ===\r\n            (userState && userState.client?.profile.userId) ? (\r\n                <span\r\n                    onClick={() => {\r\n                        deleteComment(comment.commentId);\r\n                    }}\r\n                    className=\"delete-comment\"\r\n                >\r\n                    {trashIcon}\r\n                </span>\r\n            ) : null}\r\n\r\n            <div className=\"comment-user-info\">\r\n                <div className=\"user-profile\">\r\n                    <img\r\n                        src={comment.profileImage || defaultProfileImage}\r\n                        alt=\"user-profile-image\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"comment-body\">\r\n                <span className=\"user-name\">\r\n                    {comment.firstName} {comment.lastName}\r\n                    {comment.userId === blogAuthorId ? (\r\n                        <span className=\"author-icon\">{crownIcon}</span>\r\n                    ) : null}\r\n                </span>\r\n                <span className=\"comment-date\">\r\n                    {moment(comment.createdAt).format('MMM Do')}\r\n                </span>\r\n\r\n                <div className=\"comment-content\">{comment.commentContent}</div>\r\n\r\n                <div className=\"comment-functions\">\r\n                    <span className=\"like-comment\">\r\n                        {currentComment.likedBy!.includes(\r\n                            userState && userState.client!.profile.userId\r\n                        ) ? (\r\n                            <span\r\n                                className=\"heart-filled\"\r\n                                onClick={() => {\r\n                                    toggleComment('array_remove');\r\n                                }}\r\n                            >\r\n                                {heartFilledIcon}\r\n                            </span>\r\n                        ) : (\r\n                            <span\r\n                                onClick={() => {\r\n                                    toggleComment('array_append');\r\n                                }}\r\n                            >\r\n                                {heartStrokeIcon}\r\n                            </span>\r\n                        )}\r\n                        {currentComment.likedBy!.length || null}\r\n                    </span>\r\n\r\n                    <span\r\n                        className=\"reply-comment\"\r\n                        onClick={() => {\r\n                            setReplyToggled(!replyToggled);\r\n                        }}\r\n                    >\r\n                        Reply To\r\n                    </span>\r\n                </div>\r\n\r\n                {replyToggled ? (\r\n                    <div className=\"reply-textfield\">\r\n                        <input\r\n                            value={replyContent}\r\n                            onChange={e => {\r\n                                setReplyContent(e.target.value);\r\n                            }}\r\n                            type=\"text\"\r\n                            name=\"comment-reply\"\r\n                            placeholder=\"Add a reply...\"\r\n                        ></input>\r\n\r\n                        <div className=\"reply-buttons\">\r\n                            <button\r\n                                className=\"reply-submit-button\"\r\n                                onClick={postReply}\r\n                            >\r\n                                Reply\r\n                            </button>\r\n                            <button\r\n                                className=\"cancel-button\"\r\n                                onClick={() => {\r\n                                    setReplyToggled(false);\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n\r\n                {/* checking for replies */}\r\n                {childrenNumber && childrenNumber > 0 ? (\r\n                    <p\r\n                        style={{\r\n                            marginBottom: childrenToggled ? '30px' : '',\r\n                        }}\r\n                        onClick={() => {\r\n                            setChildrenToggled(!childrenToggled);\r\n                        }}\r\n                        className=\"show-all-replies\"\r\n                    >\r\n                        {childrenToggled\r\n                            ? 'Hide Replies'\r\n                            : childrenNumber > 1\r\n                            ? `Show ${childrenNumber} replies`\r\n                            : `Show 1 reply`}\r\n                        <span className=\"down-arrow\">{downArrowIcon}</span>\r\n                    </p>\r\n                ) : null}\r\n\r\n                {childrenToggled\r\n                    ? childrenComments.map(children => (\r\n                          <ChildrenComment\r\n                              key={children.commentId}\r\n                              comment={children}\r\n                              blogAuthorId={blogAuthorId}\r\n                              deleteChildComment={deleteChildComment}\r\n                          />\r\n                      ))\r\n                    : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileNavigation\\ProfileNavigation.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBookmarks\\ProfileBookmarks.tsx",["260","261","262"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { loadingAnimation } from 'src/assets/SVGs';\r\nimport { RootStore } from 'src/redux/store';\r\nimport TextBlog from '../TextBlogs/TextBlog';\r\nimport './profileBookmarks.css';\r\n\r\nexport interface bookmarkBlogInterface {\r\n    blogId: number;\r\n    authorId: number;\r\n    authorName: string;\r\n    authorProfileImage: string | null;\r\n    blogTopic: string;\r\n    blogTitle: string;\r\n}\r\n\r\nconst ProfileBookmarks = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    const [bookmarkBlogs, setBookmarkBlogs] = useState<bookmarkBlogInterface[]>(\r\n        []\r\n    );\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        (async function getBookmarks() {\r\n            setBookmarkBlogs([]);\r\n            setLoading(true);\r\n            const res = await fetch('/blog/getBookmarks', {\r\n                headers: {\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n            });\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                data.bookmarks.map((bookmark: any) => {\r\n                    setBookmarkBlogs(bookmarkBlogs => [\r\n                        {\r\n                            blogId: bookmark.blog_id,\r\n                            authorId: bookmark.user_id,\r\n                            authorName: bookmark.first_name,\r\n                            authorProfileImage: bookmark.profileimage,\r\n                            blogTopic: bookmark.topic_title,\r\n                            blogTitle: bookmark.title,\r\n                        },\r\n                        ...bookmarkBlogs,\r\n                    ]);\r\n                });\r\n\r\n                setLoading(false);\r\n                //\r\n            } else {\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    }, [userState && userState.client?.profile.bookmarks]);\r\n\r\n    return loading ? (\r\n        loadingAnimation\r\n    ) : (\r\n        <div className=\"bookmark-container\">\r\n            {bookmarkBlogs[0] ? (\r\n                bookmarkBlogs.map(blog => (\r\n                    <TextBlog\r\n                        key={blog.blogId}\r\n                        blogId={blog.blogId}\r\n                        authorId={blog.authorId}\r\n                        authorName={blog.authorName}\r\n                        authorProfileImage={blog.authorProfileImage}\r\n                        blogTitle={blog.blogTitle}\r\n                        blogTopic={blog.blogTopic}\r\n                    />\r\n                ))\r\n            ) : (\r\n                <h2>No Bookmarks found.</h2>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileBookmarks;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileDrafts\\ProfileDrafts.tsx",["263","264"],"import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { loadingAnimation } from 'src/assets/SVGs';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { draftsType } from '../Profile';\r\nimport './profileDrafts.css';\r\n\r\ninterface draftInterface {\r\n    draftId: number;\r\n    draftTitle: string;\r\n    draftContent: string;\r\n    lastModified: Date;\r\n}\r\n\r\nconst ProfileDrafts = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [draftBlogs, setDraftBlogs] = useState<draftInterface[]>([]);\r\n\r\n    useEffect(() => {\r\n        (async function getDrafts() {\r\n            setLoading(true);\r\n            const res = await fetch(`/blog/getDrafts`, {\r\n                headers: {\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n            });\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                setDraftBlogs(data.drafts);\r\n                setLoading(false);\r\n            } else {\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return loading ? (\r\n        loadingAnimation\r\n    ) : (\r\n        <div\r\n            className={\r\n                'drafts ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'drafts-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            {draftBlogs.length === 0 ? (\r\n                <h2>You do not have any drafts.</h2>\r\n            ) : (\r\n                draftBlogs.map((draft, index) => (\r\n                    <div key={draft.draftId} className=\"draft\">\r\n                        <h2 className=\"index\">\r\n                            {index < 10 ? '0' + (index + 1) : index}\r\n                        </h2>\r\n\r\n                        <div className=\"draft-info\">\r\n                            <Link\r\n                                className=\"link\"\r\n                                to={`/editor/${draft.draftId}`}\r\n                            >\r\n                                <h2>{draft.draftTitle}</h2>\r\n                            </Link>\r\n\r\n                            <div className=\"last-modified\">\r\n                                Last Modified:{' '}\r\n                                <strong>\r\n                                    {moment(draft.lastModified).format(\r\n                                        'MMM Do'\r\n                                    )}\r\n                                </strong>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileDrafts;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\TextBlogs\\TextBlog.tsx",["265"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    bookmarkFilledIcon,\r\n    bookmarkStrokeIcon,\r\n    defaultProfileImage,\r\n} from 'src/assets/SVGs';\r\nimport { toggleBookmark } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { bookmarkBlogInterface } from '../ProfileBookmarks/ProfileBookmarks';\r\nimport './textBlog.css';\r\n\r\nconst TextBlog = ({\r\n    blogId,\r\n    authorId,\r\n    authorName,\r\n    authorProfileImage,\r\n    blogTitle,\r\n    blogTopic,\r\n}: bookmarkBlogInterface) => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'text-blog ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'text-blog-dark'\r\n                    : '')\r\n            }\r\n        >\r\n            <div className=\"blog-info\">\r\n                <div className=\"author-profile-image\">\r\n                    <img src={authorProfileImage || defaultProfileImage} />\r\n                </div>\r\n                <Link className=\"link\" to={`/user/${authorId}`}>\r\n                    <span className=\"author-name\">{authorName}</span>\r\n                </Link>\r\n                |<span className=\"blog-topic\">{blogTopic}</span>\r\n                {userState &&\r\n                userState.client?.profile.bookmarks &&\r\n                userState.client?.profile.bookmarks.includes(blogId) ? (\r\n                    <span\r\n                        className=\"bookmark-icon\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                toggleBookmark(\r\n                                    blogId,\r\n                                    'array_remove',\r\n                                    userState && userState.client?.accessToken\r\n                                )\r\n                            );\r\n                        }}\r\n                    >\r\n                        {bookmarkFilledIcon}\r\n                    </span>\r\n                ) : (\r\n                    <span\r\n                        className=\"bookmark-icon\"\r\n                        onClick={() => {\r\n                            dispatch(\r\n                                toggleBookmark(\r\n                                    blogId,\r\n                                    'array_append',\r\n                                    userState && userState.client?.accessToken\r\n                                )\r\n                            );\r\n                        }}\r\n                    >\r\n                        {bookmarkStrokeIcon}\r\n                    </span>\r\n                )}\r\n            </div>\r\n            <Link className=\"link\" to={`/blog/${blogId}`}>\r\n                <p className=\"blog-title\">{blogTitle}</p>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextBlog;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\ExploreTopics\\ExploreTopics.tsx",["266","267"],"import React from 'react';\r\n\r\nconst ExploreTopics = ({\r\n    topicId,\r\n    topicTitle,\r\n    topicImage,\r\n    currentTopic,\r\n    setCurrentTopic,\r\n}: {\r\n    topicId: number;\r\n    topicTitle: string;\r\n    topicImage: string;\r\n    currentTopic: undefined | number;\r\n    setCurrentTopic: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n}) => {\r\n    const changeTopic = () => {\r\n        currentTopic === topicId\r\n            ? setCurrentTopic(undefined)\r\n            : setCurrentTopic(topicId);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'topic ' + (currentTopic == topicId ? 'selected-topic' : '')\r\n            }\r\n        >\r\n            <div className=\"topic-image\" onClick={changeTopic}>\r\n                <img src={`${topicImage}.jpg`} alt={`${topicTitle} image`} />\r\n            </div>\r\n\r\n            <p className=\"topic-title\">{topicTitle}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExploreTopics;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\ChildrenComment.tsx",["268","269"],"import moment from 'moment';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    crownIcon,\r\n    defaultProfileImage,\r\n    heartFilledIcon,\r\n    heartStrokeIcon,\r\n    trashIcon,\r\n} from 'src/assets/SVGs';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { commentInterface } from './Comments';\r\n\r\nconst ChildrenComment = ({\r\n    comment,\r\n    blogAuthorId,\r\n    deleteChildComment,\r\n}: {\r\n    comment: commentInterface;\r\n    blogAuthorId: number;\r\n    deleteChildComment: (commentId: number) => void;\r\n}) => {\r\n    const [currentComment, setCurrentComment] =\r\n        useState<commentInterface>(comment);\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    const toggleComment = async (status: string) => {\r\n        const res = await fetch(\r\n            `/blog/toggleComment/${comment.commentId}/${status}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    authorization: `bearer ${\r\n                        userState && userState.client?.accessToken\r\n                    }`,\r\n                },\r\n            }\r\n        );\r\n        const data = await res.json();\r\n\r\n        if (data.ok) {\r\n            setCurrentComment({\r\n                ...currentComment,\r\n                likedBy: data.likedBy,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"child-comment\">\r\n            {currentComment.userId ===\r\n            (userState && userState.client?.profile.userId) ? (\r\n                <span\r\n                    onClick={() => {\r\n                        deleteChildComment(comment.commentId);\r\n                    }}\r\n                    className=\"delete-comment\"\r\n                >\r\n                    {trashIcon}\r\n                </span>\r\n            ) : null}\r\n\r\n            <div className=\"comment-user-info\">\r\n                <div className=\"user-profile\">\r\n                    <img\r\n                        src={comment.profileImage || defaultProfileImage}\r\n                        alt=\"user-profile-image\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"comment-body\">\r\n                <span className=\"user-name\">\r\n                    {comment.firstName} {comment.lastName}\r\n                    {comment.userId === blogAuthorId ? (\r\n                        <span className=\"author-icon\">{crownIcon}</span>\r\n                    ) : null}\r\n                </span>\r\n\r\n                <span className=\"comment-date\">\r\n                    {moment(comment.createdAt).format('MMM Do')}\r\n                </span>\r\n\r\n                <div className=\"comment-content\">{comment.commentContent}</div>\r\n\r\n                <div className=\"comment-functions\">\r\n                    <span className=\"like-comment\">\r\n                        {currentComment.likedBy!.includes(\r\n                            userState && userState.client!.profile.userId\r\n                        ) ? (\r\n                            <span\r\n                                className=\"heart-filled\"\r\n                                onClick={() => {\r\n                                    toggleComment('array_remove');\r\n                                }}\r\n                            >\r\n                                {heartFilledIcon}\r\n                            </span>\r\n                        ) : (\r\n                            <span\r\n                                onClick={() => {\r\n                                    toggleComment('array_append');\r\n                                }}\r\n                            >\r\n                                {heartStrokeIcon}\r\n                            </span>\r\n                        )}\r\n                        {currentComment.likedBy!.length || null}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChildrenComment;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\About\\About.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\BlogDeleteModal\\BlogDeleteModal.tsx",["270","271"],"import React from 'react';\r\nimport './blogDeleteModal.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { animationPrefixes } from '../ModalContainer';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { trashIcon } from 'src/assets/SVGs';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    showFailureToast,\r\n    showSuccessToast,\r\n} from 'src/components/Utils/ToastNotification';\r\n\r\nconst BlogDeleteModal = () => {\r\n    const dispatch = useDispatch();\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const applicationState = useSelector(\r\n        (state: RootStore) => state.application\r\n    );\r\n\r\n    const currentURL = window.location.href;\r\n    const urlElements = currentURL.split('/');\r\n    const blogId = +urlElements[urlElements.length - 1];\r\n\r\n    const deleteBlog = async () => {\r\n        const res = await fetch(`/blog/deleteBlog/${blogId}`, {\r\n            headers: {\r\n                authorization: `bearer ${\r\n                    userState && userState.client?.accessToken\r\n                }`,\r\n            },\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            window.location.replace(\r\n                `/user/${userState && userState.client?.profile.userId}`\r\n            );\r\n            showSuccessToast('Blog Successfully Removed!');\r\n        } else {\r\n            showFailureToast('Something went wrong! Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <motion.div\r\n            className={\r\n                'blog-delete-modal ' +\r\n                (applicationState &&\r\n                applicationState.applicationTheme === 'dark'\r\n                    ? 'logout-modal-dark'\r\n                    : '')\r\n            }\r\n            initial={animationPrefixes.initial}\r\n            animate={animationPrefixes.animate}\r\n            transition={animationPrefixes.transition}\r\n            exit={animationPrefixes.exit}\r\n        >\r\n            <div className=\"icon-section\">{trashIcon}</div>\r\n\r\n            <div className=\"content-section\">\r\n                <h2>Are you sure you want to delete this blog?</h2>\r\n                <p>\r\n                    You will not be able to retrieve this blog after you delete\r\n                    it.\r\n                </p>\r\n\r\n                <button className=\"delete-btn\" onClick={deleteBlog}>\r\n                    Delete Blog\r\n                </button>\r\n                <button\r\n                    className=\"cancel-btn\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default BlogDeleteModal;\r\n",{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","severity":1,"message":"277","line":18,"column":30,"nodeType":"278","messageId":"279","endLine":18,"endColumn":49},{"ruleId":"280","severity":1,"message":"281","line":33,"column":8,"nodeType":"282","endLine":33,"endColumn":10,"suggestions":"283"},{"ruleId":"280","severity":1,"message":"284","line":40,"column":8,"nodeType":"282","endLine":40,"endColumn":10,"suggestions":"285"},{"ruleId":"276","severity":1,"message":"286","line":10,"column":11,"nodeType":"278","messageId":"279","endLine":10,"endColumn":20},{"ruleId":"287","severity":1,"message":"288","line":92,"column":17,"nodeType":"289","endLine":92,"endColumn":64},{"ruleId":"280","severity":1,"message":"290","line":38,"column":8,"nodeType":"282","endLine":38,"endColumn":10,"suggestions":"291"},{"ruleId":"280","severity":1,"message":"290","line":51,"column":8,"nodeType":"282","endLine":51,"endColumn":10,"suggestions":"292"},{"ruleId":"272","replacedBy":"293"},{"ruleId":"274","replacedBy":"294"},{"ruleId":"276","severity":1,"message":"295","line":59,"column":12,"nodeType":"278","messageId":"279","endLine":59,"endColumn":22},{"ruleId":"280","severity":1,"message":"296","line":84,"column":8,"nodeType":"282","endLine":84,"endColumn":30,"suggestions":"297"},{"ruleId":"276","severity":1,"message":"298","line":4,"column":10,"nodeType":"278","messageId":"279","endLine":4,"endColumn":14},{"ruleId":"276","severity":1,"message":"299","line":46,"column":12,"nodeType":"278","messageId":"279","endLine":46,"endColumn":26},{"ruleId":"276","severity":1,"message":"300","line":49,"column":12,"nodeType":"278","messageId":"279","endLine":49,"endColumn":25},{"ruleId":"301","severity":1,"message":"302","line":109,"column":30,"nodeType":"303","messageId":"304","endLine":109,"endColumn":32},{"ruleId":"305","severity":1,"message":"306","line":184,"column":29,"nodeType":"289","endLine":187,"endColumn":31},{"ruleId":"305","severity":1,"message":"306","line":223,"column":29,"nodeType":"289","endLine":226,"endColumn":31},{"ruleId":"280","severity":1,"message":"307","line":179,"column":8,"nodeType":"282","endLine":179,"endColumn":10,"suggestions":"308"},{"ruleId":"305","severity":1,"message":"306","line":220,"column":21,"nodeType":"289","endLine":220,"endColumn":67},{"ruleId":"276","severity":1,"message":"309","line":1,"column":10,"nodeType":"278","messageId":"279","endLine":1,"endColumn":16},{"ruleId":"276","severity":1,"message":"310","line":1,"column":10,"nodeType":"278","messageId":"279","endLine":1,"endColumn":27},{"ruleId":"276","severity":1,"message":"311","line":42,"column":6,"nodeType":"278","messageId":"279","endLine":42,"endColumn":20},{"ruleId":"276","severity":1,"message":"312","line":1,"column":10,"nodeType":"278","messageId":"279","endLine":1,"endColumn":20},{"ruleId":"276","severity":1,"message":"313","line":8,"column":18,"nodeType":"278","messageId":"279","endLine":8,"endColumn":33},{"ruleId":"276","severity":1,"message":"314","line":18,"column":11,"nodeType":"278","messageId":"279","endLine":18,"endColumn":18},{"ruleId":"280","severity":1,"message":"315","line":99,"column":8,"nodeType":"282","endLine":99,"endColumn":21,"suggestions":"316"},{"ruleId":"276","severity":1,"message":"286","line":27,"column":11,"nodeType":"278","messageId":"279","endLine":27,"endColumn":20},{"ruleId":"280","severity":1,"message":"317","line":63,"column":8,"nodeType":"282","endLine":63,"endColumn":10,"suggestions":"318"},{"ruleId":"280","severity":1,"message":"317","line":89,"column":8,"nodeType":"282","endLine":89,"endColumn":10,"suggestions":"319"},{"ruleId":"280","severity":1,"message":"320","line":53,"column":8,"nodeType":"282","endLine":53,"endColumn":10,"suggestions":"321"},{"ruleId":"280","severity":1,"message":"320","line":68,"column":8,"nodeType":"282","endLine":68,"endColumn":25,"suggestions":"322"},{"ruleId":"305","severity":1,"message":"306","line":153,"column":21,"nodeType":"289","endLine":156,"endColumn":23},{"ruleId":"323","severity":1,"message":"324","line":39,"column":52,"nodeType":"325","messageId":"326","endLine":39,"endColumn":54},{"ruleId":"280","severity":1,"message":"290","line":59,"column":8,"nodeType":"282","endLine":59,"endColumn":58,"suggestions":"327"},{"ruleId":"280","severity":1,"message":"328","line":59,"column":9,"nodeType":"329","endLine":59,"endColumn":57},{"ruleId":"276","severity":1,"message":"330","line":7,"column":10,"nodeType":"278","messageId":"279","endLine":7,"endColumn":20},{"ruleId":"280","severity":1,"message":"290","line":45,"column":8,"nodeType":"282","endLine":45,"endColumn":10,"suggestions":"331"},{"ruleId":"287","severity":1,"message":"288","line":41,"column":21,"nodeType":"289","endLine":41,"endColumn":76},{"ruleId":"301","severity":1,"message":"302","line":25,"column":42,"nodeType":"303","messageId":"304","endLine":25,"endColumn":44},{"ruleId":"305","severity":1,"message":"306","line":29,"column":17,"nodeType":"289","endLine":29,"endColumn":78},{"ruleId":"276","severity":1,"message":"332","line":2,"column":27,"nodeType":"278","messageId":"279","endLine":2,"endColumn":36},{"ruleId":"305","severity":1,"message":"306","line":67,"column":21,"nodeType":"289","endLine":70,"endColumn":23},{"ruleId":"276","severity":1,"message":"313","line":4,"column":18,"nodeType":"278","messageId":"279","endLine":4,"endColumn":33},{"ruleId":"276","severity":1,"message":"312","line":9,"column":10,"nodeType":"278","messageId":"279","endLine":9,"endColumn":20},"no-native-reassign",["333"],"no-negated-in-lhs",["334"],"@typescript-eslint/no-unused-vars","'setApplicationTheme' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["335"],"React Hook useEffect has missing dependencies: 'applicationTheme' and 'dispatch'. Either include them or remove the dependency array.",["336"],"'userState' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'userState'. Either include it or remove the dependency array.",["337"],["338"],["333"],["334"],"'userExists' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'profileId', 'sectionName', and 'userState'. Either include them or remove the dependency array. Outer scope values like 'window.location.href' aren't valid dependencies because mutating them doesn't re-render the component.",["339"],"'Link' is defined but never used.","'profilePreview' is assigned a value but never used.","'bannerPreview' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'draftId' and 'userState'. Either include them or remove the dependency array.",["340"],"'motion' is defined but never used.","'StringMappingType' is defined but never used.","'LoginErrorType' is defined but never used.","'useHistory' is defined but never used.","'AnimatePresence' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'infoEndPoint' and 'profileId'. Either include them or remove the dependency array.",["341"],"React Hook useEffect has a missing dependency: 'blogId'. Either include it or remove the dependency array.",["342"],["343"],"React Hook useEffect has a missing dependency: 'comment.commentId'. Either include it or remove the dependency array.",["344"],["345"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["346"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","'draftsType' is defined but never used.",["347"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"352","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"361","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"352","fix":"368"},{"desc":"352","fix":"369"},"Update the dependencies array to be: [dispatch]",{"range":"370","text":"371"},"Update the dependencies array to be: [applicationTheme, dispatch]",{"range":"372","text":"373"},"Update the dependencies array to be: [userState]",{"range":"374","text":"375"},{"range":"376","text":"375"},"Update the dependencies array to be: [profileId, sectionName, userState]",{"range":"377","text":"378"},"Update the dependencies array to be: [draftId, userState]",{"range":"379","text":"380"},"Update the dependencies array to be: [currentInfo, infoEndPoint, profileId]",{"range":"381","text":"382"},"Update the dependencies array to be: [blogId]",{"range":"383","text":"384"},{"range":"385","text":"384"},"Update the dependencies array to be: [comment.commentId]",{"range":"386","text":"387"},"Update the dependencies array to be: [childrenToggled, comment.commentId]",{"range":"388","text":"389"},{"range":"390","text":"375"},{"range":"391","text":"375"},[1156,1158],"[dispatch]",[1293,1295],"[applicationTheme, dispatch]",[1422,1424],"[userState]",[1657,1659],[2775,2797],"[profileId, sectionName, userState]",[5756,5758],"[draftId, userState]",[3590,3603],"[currentInfo, infoEndPoint, profileId]",[2166,2168],"[blogId]",[2753,2755],[1729,1731],"[comment.commentId]",[2163,2180],"[childrenToggled, comment.commentId]",[2002,2052],[1422,1424]]