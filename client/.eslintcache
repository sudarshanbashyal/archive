[{"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx":"1","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts":"2","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx":"3","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx":"4","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx":"6","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx":"7","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx":"8","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx":"9","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx":"10","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx":"11","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx":"12","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx":"13","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx":"14","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx":"15","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx":"16","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx":"17","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx":"18","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx":"19","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx":"20","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx":"21","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx":"22","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx":"23","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts":"24","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts":"25","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts":"26","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx":"27","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts":"28","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx":"29","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts":"30","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts":"31","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts":"32","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts":"33","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx":"34","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx":"35","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx":"36","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx":"37"},{"size":646,"mtime":1612687051228,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":1874,"mtime":1613994235581,"results":"41","hashOfConfig":"39"},{"size":1690,"mtime":1612789181126,"results":"42","hashOfConfig":"39"},{"size":2441,"mtime":1618406452944,"results":"43","hashOfConfig":"39"},{"size":1002,"mtime":1612770517474,"results":"44","hashOfConfig":"39"},{"size":1896,"mtime":1612779816302,"results":"45","hashOfConfig":"39"},{"size":2125,"mtime":1613305033267,"results":"46","hashOfConfig":"39"},{"size":1458,"mtime":1613305068939,"results":"47","hashOfConfig":"39"},{"size":1042,"mtime":1611647247923,"results":"48","hashOfConfig":"39"},{"size":7675,"mtime":1618310390759,"results":"49","hashOfConfig":"39"},{"size":782,"mtime":1613392137344,"results":"50","hashOfConfig":"39"},{"size":2052,"mtime":1613392782416,"results":"51","hashOfConfig":"39"},{"size":2488,"mtime":1611820111455,"results":"52","hashOfConfig":"39"},{"size":11828,"mtime":1618469469696,"results":"53","hashOfConfig":"39"},{"size":6287,"mtime":1613288770738,"results":"54","hashOfConfig":"39"},{"size":214,"mtime":1611833122235,"results":"55","hashOfConfig":"39"},{"size":1235,"mtime":1618215261487,"results":"56","hashOfConfig":"39"},{"size":13096,"mtime":1613375018983,"results":"57","hashOfConfig":"39"},{"size":9964,"mtime":1618303596992,"results":"58","hashOfConfig":"39"},{"size":6626,"mtime":1618390266253,"results":"59","hashOfConfig":"39"},{"size":1955,"mtime":1613291409399,"results":"60","hashOfConfig":"39"},{"size":2372,"mtime":1618406666612,"results":"61","hashOfConfig":"39"},{"size":572,"mtime":1612706728128,"results":"62","hashOfConfig":"39"},{"size":5314,"mtime":1618469295513,"results":"63","hashOfConfig":"39"},{"size":3162,"mtime":1618468156139,"results":"64","hashOfConfig":"39"},{"size":2067,"mtime":1612707275282,"results":"65","hashOfConfig":"39"},{"size":8933,"mtime":1618469296907,"results":"66","hashOfConfig":"39"},{"size":1448,"mtime":1613303942382,"results":"67","hashOfConfig":"39"},{"size":1077,"mtime":1612706692485,"results":"68","hashOfConfig":"39"},{"size":554,"mtime":1612704922578,"results":"69","hashOfConfig":"39"},{"size":501,"mtime":1612772718647,"results":"70","hashOfConfig":"39"},{"size":708,"mtime":1613216937350,"results":"71","hashOfConfig":"39"},{"size":925,"mtime":1613304134419,"results":"72","hashOfConfig":"39"},{"size":5516,"mtime":1618303520705,"results":"73","hashOfConfig":"39"},{"size":2791,"mtime":1618310265464,"results":"74","hashOfConfig":"39"},{"size":2448,"mtime":1618301877987,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"2hvudg",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx",[],["163","164"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx",["165","166","167","168"],"import React, { useEffect, useState } from 'react';\nimport Home from './components/Home/Home';\nimport Landing from './components/Landing/Landing';\nimport ModalContainer from './components/Modal/ModalContainer';\nimport Navbar from './components/Navbar/Navbar';\nimport './index.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStore } from './redux/store';\nimport { refreshToken } from './redux/Actions/userActions';\nimport { ToastContainer } from 'react-toastify';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [userLogged, setUserLogged] = useState(\n        localStorage.getItem('userLoggedIn')\n    );\n\n    // get user from the state\n    const userState = useSelector((state: RootStore) => state.client);\n\n    // get application state\n    const applicationState = useSelector(\n        (state: RootStore) => state.application\n    );\n\n    // request the backend for token with the cookie\n    useEffect(() => {\n        dispatch(refreshToken());\n    }, []);\n\n    //\n\n    return (\n        <div className=\"App\">\n            {/* Render Home page if the user is in the store */}\n            {userState.loading ? null : userState.client?.profile ? (\n                <Home />\n            ) : (\n                <Landing />\n            )}\n\n            {/* check is modal is open */}\n            {applicationState && applicationState.modal?.modalOpen && (\n                <ModalContainer />\n            )}\n\n            {/* toast notification container */}\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={4000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </div>\n    );\n};\n\nexport default App;\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx",["169"],"import React from 'react';\r\nimport './landing.css';\r\nimport typewriter from '../../assets/images/typewriter.png';\r\nimport yellowSwiggle from '../../assets/yellow-swiggle.svg';\r\nimport redSwiggle from '../../assets/red-swiggle.svg';\r\nimport whiteSwiggle from '../../assets/white-swiggle.svg';\r\nimport formSwiggle from '../../assets/form-red-swiggle.svg';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\n\r\nconst Landing = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <div className=\"image-section\">\r\n                <h3 className=\"logo-gradient\">Archive.</h3>\r\n                <img\r\n                    className=\"swiggle yellow-swiggle\"\r\n                    src={yellowSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle white-swiggle\"\r\n                    src={whiteSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle red-swiggle\"\r\n                    src={redSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"login-section\">\r\n                <LoginForm />\r\n\r\n                <img\r\n                    className=\"swiggle form-swiggle\"\r\n                    src={formSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <img className=\"typewriter\" src={typewriter} alt=\"\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx",["170"],"import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport EditorPage from '../Editor/EditorPage';\r\nimport Explore from '../Explore/Explore';\r\nimport Feed from '../Feed/Feed';\r\nimport ModalContainer from '../Modal/ModalContainer';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport Profile from '../Profile/Profile';\r\nimport Settings from '../Settings/Settings';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <BrowserRouter>\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Feed} />\r\n                    <Route exact path=\"/user/:id\" component={Profile} />\r\n                    <Route path=\"/settings\" component={Settings} />\r\n                    <Route exact path=\"/explore\" component={Explore} />\r\n                    <Route exact path=\"/editor\" component={EditorPage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx",["171"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { openModal } from 'src/redux/Actions/applicationActions';\r\nimport { followUser, unfollowUser } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profile.css';\r\nimport ProfileBlogs from './ProfileBlogs/ProfileBlogs';\r\n\r\ninterface ProfileInfoType {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    workplace: string;\r\n    topicsFollowed: number[];\r\n    usersFollowed: number[];\r\n    userFollowers: number;\r\n}\r\n\r\nexport interface ProfileBlogType {\r\n    blogId: number;\r\n    title: string;\r\n    createdAt: Date;\r\n    headerImage: string;\r\n    topicTitle: string;\r\n}\r\n\r\nconst Profile = (props: any) => {\r\n    const { id: profileId } = props.match.params;\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const dispatch = useDispatch();\r\n\r\n    const [userExists, setUserExists] = useState<boolean>(true);\r\n    const [profileInfo, setProfileInfo] = useState<ProfileInfoType>({\r\n        firstName: '',\r\n        lastName: '',\r\n        interest: '',\r\n        workplace: '',\r\n        topicsFollowed: [],\r\n        usersFollowed: [],\r\n        userFollowers: 0,\r\n    });\r\n    const [profileBlogs, setProfileBlogs] = useState<ProfileBlogType[]>([]);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            setProfileBlogs([]);\r\n            const res = await fetch(`/user/getUser/${profileId}`);\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                // set up profile info\r\n                let {\r\n                    first_name,\r\n                    last_name,\r\n                    interest,\r\n                    workplace,\r\n                    users_followed,\r\n                    topics_followed,\r\n                } = data.info[0];\r\n                setProfileInfo({\r\n                    firstName: first_name,\r\n                    lastName: last_name,\r\n                    interest,\r\n                    workplace,\r\n                    topicsFollowed: topics_followed,\r\n                    usersFollowed: users_followed,\r\n                    userFollowers: data.followers.length,\r\n                });\r\n\r\n                if (!data.info[0].title) {\r\n                    return;\r\n                }\r\n\r\n                // retrieve all the blogs\r\n                const retrievedBlogs = data.info.map(\r\n                    (blog: any): ProfileBlogType => {\r\n                        const {\r\n                            blog_id: blogId,\r\n                            title,\r\n                            created_at: createdAt,\r\n                            header_image: headerImage,\r\n                            topic_title: topicTitle,\r\n                        } = blog;\r\n\r\n                        return {\r\n                            blogId,\r\n                            title,\r\n                            createdAt,\r\n                            headerImage,\r\n                            topicTitle,\r\n                        };\r\n                    }\r\n                );\r\n\r\n                setProfileBlogs(profileBlogs => [\r\n                    ...profileBlogs,\r\n                    ...retrievedBlogs,\r\n                ]);\r\n            } else {\r\n                setUserExists(false);\r\n            }\r\n        })();\r\n    }, [profileId]);\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <div className=\"header-image\"></div>\r\n\r\n            <div className=\"content-container\">\r\n                <div className=\"profile\">\r\n                    <div className=\"profile-picture\"></div>\r\n\r\n                    {/* check user id and display buttons accordingly */}\r\n                    {+profileId === userState.client!.profile.userId ? (\r\n                        <Link to=\"/settings\">\r\n                            <button className=\"follow-btn\">Edit Profile</button>\r\n                        </Link>\r\n                    ) : userState &&\r\n                      userState.client?.profile.usersFollowed.includes(\r\n                          +profileId\r\n                      ) ? (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    unfollowUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    followUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                    <div className=\"profile-info\">\r\n                        <h1 className=\"user-name\">\r\n                            {profileInfo.firstName} {profileInfo.lastName}\r\n                        </h1>\r\n                        <p className=\"related-field\">\r\n                            {profileInfo.interest} {profileInfo.workplace}\r\n                        </p>\r\n\r\n                        <div className=\"profile-stats\">\r\n                            <span\r\n                                className=\"follower-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('followers'));\r\n                                }}\r\n                            >\r\n                                <strong>{profileInfo.userFollowers}</strong>{' '}\r\n                                Followers\r\n                            </span>\r\n                            <span className=\"blog-stat\">\r\n                                <strong>{profileBlogs.length}</strong> Blogs\r\n                            </span>\r\n                            <span\r\n                                className=\"following-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('following'));\r\n                                }}\r\n                            >\r\n                                <strong>\r\n                                    {profileInfo.usersFollowed.length +\r\n                                        profileInfo.topicsFollowed.length}\r\n                                </strong>{' '}\r\n                                Following\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    {profileBlogs[0] ? (\r\n                        <ProfileBlogs profileBlogs={profileBlogs} />\r\n                    ) : (\r\n                        <h2 className=\"no-blogs-message\">\r\n                            This user does not have any blogs.\r\n                        </h2>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx",["172"],"import React from 'react';\r\nimport ProfileSettings from './Profile/ProfileSettings';\r\nimport './settings.css';\r\nimport { Link, NavLink, Route } from 'react-router-dom';\r\nimport AccountSettings from './Account/AccountSettings';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className=\"settings\">\r\n            <h1>Settings</h1>\r\n            {/* <Link to=\"/settings/account\">account settings</Link>|\r\n            <Link to=\"/settings/\">profile settings</Link> */}\r\n            <div className=\"settings-container\">\r\n                <div className=\"setting-links\">\r\n                    <ul className=\"links\">\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/\"\r\n                            >\r\n                                Profile\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/account\"\r\n                            >\r\n                                Account\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                to=\"/settings/about\"\r\n                            >\r\n                                About\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"setting-content\">\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/\"\r\n                        component={ProfileSettings}\r\n                    />\r\n\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/account\"\r\n                        component={AccountSettings}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx",["173","174","175","176","177"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx",["178"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { showSuccessToast } from '../Utils/ToastNotification';\r\nimport './editor.css';\r\nimport Wysiwyg from './Wysiwyg/Wysiwyg';\r\n\r\nconst EditorPage = () => {\r\n    const history = useHistory();\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    //\r\n    const [blogTitle, setBlogTitle] = useState<string | null>(null);\r\n    const [blogTopics, setBlogTopics] = useState<\r\n        Array<{ topic_id: number; topic_image: string; topic_title: string }>\r\n    >([]);\r\n    const [selectedTopic, setSelectedTopic] = useState<number | null>(null);\r\n\r\n    // image preview and error\r\n    const imageUpload = useRef<any>(null);\r\n\r\n    const [previewSource, setPreviewSource] = useState<any>(null);\r\n    const [imageError, setImageError] = useState<string | null>(null);\r\n\r\n    // editor state, onchange functions\r\n    const [editorHTML, setEditorHTML] = useState();\r\n    const [editorError, setEditorError] = useState<string | null>(null);\r\n\r\n    // image uploader and previewer\r\n    const openFileUploader = (): void => {\r\n        imageUpload.current!.click();\r\n    };\r\n\r\n    const handleFileInputChange = (e: any): void => {\r\n        const file = e.target.files![0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                setImageError('The uploaded file has to be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                setImageError('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            setImageError(null);\r\n            previewImage(file);\r\n        }\r\n    };\r\n\r\n    const previewImage = (file: Blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const removePreviewImage = () => {\r\n        setPreviewSource(null);\r\n    };\r\n\r\n    // blog submission and validation\r\n    const handleSubmit = () => {\r\n        if (!blogTitle) {\r\n            setEditorError('Your blog must have a title.');\r\n        } else if (!previewSource) {\r\n            setEditorError('You must upload an image.');\r\n        } else if (!selectedTopic) {\r\n            setEditorError('You must select a topic.');\r\n        } else if (!editorHTML) {\r\n            setEditorError('Your blog cannot be empty.');\r\n        } else {\r\n            setEditorError(null);\r\n            // dispatch(openModal('uploadBlog'));\r\n\r\n            // upload the blog\r\n            uploadBlog();\r\n        }\r\n    };\r\n\r\n    const uploadBlog = async () => {\r\n        const blogData = {\r\n            blogTitle,\r\n            blogContent: editorHTML,\r\n            topicId: selectedTopic,\r\n            encodedImage: previewSource,\r\n        };\r\n\r\n        const res = await fetch('blog/postBlog', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: `bearer ${\r\n                    userState && userState.client?.accessToken\r\n                }`,\r\n            },\r\n            body: JSON.stringify(blogData),\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            showSuccessToast('Blog Successfully Published.');\r\n            history.push(\r\n                `/user/${userState && userState.client?.profile.userId}`\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await fetch('blog/getTopics');\r\n            const data = await res.json();\r\n            setBlogTopics(data.data);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"editor-page\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"story-title\"\r\n                placeholder=\"Title your Story...\"\r\n                onChange={e => {\r\n                    setBlogTitle(e.target.value);\r\n                }}\r\n            />\r\n\r\n            <input\r\n                type=\"file\"\r\n                name=\"image\"\r\n                ref={imageUpload}\r\n                style={{ display: 'none' }}\r\n                onChange={handleFileInputChange}\r\n            />\r\n\r\n            {previewSource ? (\r\n                <div className=\"header-image\">\r\n                    <svg\r\n                        onClick={removePreviewImage}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                    >\r\n                        <path d=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\" />\r\n                    </svg>\r\n                    <img src={previewSource} alt=\"Header Image\" />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div\r\n                        className=\"header-image-placeholder\"\r\n                        onClick={openFileUploader}\r\n                    >\r\n                        <p>Click here to upload a header.</p>\r\n                    </div>\r\n                    <p className=\"error-message\">{imageError && imageError}</p>\r\n                </div>\r\n            )}\r\n\r\n            <label className=\"topic-label\" htmlFor=\"blog-topic\">\r\n                Select a topic for your blog:{' '}\r\n            </label>\r\n            <select\r\n                id=\"blog-topic\"\r\n                onChange={(e: any) => {\r\n                    setSelectedTopic(+e.target.value);\r\n                }}\r\n            >\r\n                <option id=\"blog-option\" selected disabled>\r\n                    Select a topic\r\n                </option>\r\n                {blogTopics.map(topic => (\r\n                    <option key={topic.topic_id} value={topic.topic_id}>\r\n                        {topic.topic_title}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <p className=\"error-message\">{editorError && editorError}</p>\r\n\r\n            <Wysiwyg\r\n                setEditorHTML={setEditorHTML}\r\n                editorHTML={editorHTML}\r\n                handleSubmit={handleSubmit}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx",["179"],"import React, { useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst Wysiwyg = ({ setEditorHTML, editorHTML, handleSubmit }: any) => {\r\n    // const [editorHTML, setEditorHTML] = useState('');\r\n\r\n    const handleEditorChange = (html: string) => {\r\n        setEditorHTML(html);\r\n    };\r\n\r\n    const modules = {\r\n        toolbar: [\r\n            [{ header: '1' }, { header: '2' }, { font: [] }],\r\n            [{ size: [] }],\r\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n            [\r\n                { list: 'ordered' },\r\n                { list: 'bullet' },\r\n                { indent: '-1' },\r\n                { indent: '+1' },\r\n            ],\r\n            ['link', 'image', 'video'],\r\n            ['clean'],\r\n        ],\r\n        clipboard: {\r\n            matchVisual: false,\r\n        },\r\n    };\r\n\r\n    const formats = [\r\n        'header',\r\n        'font',\r\n        'size',\r\n        'bold',\r\n        'italic',\r\n        'underline',\r\n        'strike',\r\n        'blockquote',\r\n        'list',\r\n        'bullet',\r\n        'indent',\r\n        'link',\r\n        'image',\r\n        'video',\r\n    ];\r\n\r\n    return (\r\n        <div className=\"Wysiwyg\">\r\n            <ReactQuill\r\n                className=\"actual-editor\"\r\n                theme=\"snow\"\r\n                value={editorHTML || ''}\r\n                onChange={handleEditorChange}\r\n                modules={modules}\r\n                formats={formats}\r\n                placeholder=\"Start Sharing...\"\r\n                bounds=\".app\"\r\n            />\r\n\r\n            <div className=\"editor-controls\">\r\n                <button className=\"draft-btn\">Save as draft</button>\r\n                <button className=\"publish-btn\" onClick={handleSubmit}>\r\n                    Publish Story\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wysiwyg;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts",["180","181"],"import { StringMappingType } from 'typescript';\r\n\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_FAILED = 'USER_FAILED';\r\nexport const USER_SUCCESS = 'USER_SUCCESS';\r\nexport const USER_LOGIN_FAILED = 'LOGIN_FAILED';\r\nexport const USER_LOGGED_OUT = 'USER_LOGGED_OUT';\r\nexport const TOKEN_FAILED = 'TOKEN_SUCCESS';\r\nexport const USER_PROFILE_UPDATED = 'USER_PROFILE_UPDATED';\r\nexport const USER_ACCOUNT_UPDATED = 'USER_ACCOUNT_UPDATED';\r\nexport const USER_FOLLOWED = 'FOLLOW_USER';\r\nexport const USER_UNFOLLOWED = 'FOLLOW_USER';\r\nexport const TOPIC_FOLLOWED = 'TOPIC_FOLLOWED';\r\nexport const TOPIC_UNFOLLOWED = 'TOPIC_UNFOLLOWED';\r\nexport const USER_PROFILE_PICTURE_UPDATED = 'USER_PROFILE_PICTURE_UPDATED';\r\nexport const USER_BANNER_PICTURE_UPDATED = 'USER_BANNER_PICTURE_UPDATED';\r\n\r\nexport type UserType = {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    interest: string;\r\n    workplace: string;\r\n    bio: string;\r\n    usersFollowed: number[];\r\n    topicsFollowed: number[];\r\n    profileImage: string;\r\n    headerImage: string;\r\n};\r\n\r\nexport type UserProfileType = {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    bio: string;\r\n    workplace: string;\r\n};\r\n\r\ntype LoginErrorType = {\r\n    message: string;\r\n};\r\n\r\nexport type LoginDataType = {\r\n    profile: UserType;\r\n    accessToken: string;\r\n};\r\n\r\nexport interface UserLoading {\r\n    type: typeof USER_LOADING;\r\n}\r\n\r\nexport interface UserFailed {\r\n    type: typeof USER_FAILED;\r\n}\r\n\r\nexport interface UserSuccess {\r\n    type: typeof USER_SUCCESS;\r\n    payload: LoginDataType;\r\n}\r\n\r\nexport interface UserLoginFailed {\r\n    type: typeof USER_LOGIN_FAILED;\r\n    // payload: LoginErrorType;\r\n    payload: {\r\n        message: string;\r\n    };\r\n}\r\n\r\nexport interface UserLoggedOut {\r\n    type: typeof USER_LOGGED_OUT;\r\n}\r\n\r\nexport interface TokenRefreshFailed {\r\n    type: typeof TOKEN_FAILED;\r\n}\r\n\r\nexport interface UserProfileUpdated {\r\n    type: typeof USER_PROFILE_UPDATED;\r\n    payload: UserProfileType;\r\n}\r\n\r\nexport interface UserAccountUpdated {\r\n    type: typeof USER_ACCOUNT_UPDATED;\r\n    payload: { email: string };\r\n}\r\n\r\nexport interface UserFollowed {\r\n    type: typeof USER_FOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface UserUnfollowed {\r\n    type: typeof USER_UNFOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface TopicFollowed {\r\n    type: typeof TOPIC_FOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface TopicUnfollowed {\r\n    type: typeof TOPIC_UNFOLLOWED;\r\n    payload: number[];\r\n}\r\n\r\nexport interface UserProfilePictureUpdated {\r\n    type: typeof USER_PROFILE_PICTURE_UPDATED;\r\n    payload: string;\r\n}\r\n\r\nexport interface UserBannerPictureUpdated {\r\n    type: typeof USER_BANNER_PICTURE_UPDATED;\r\n    payload: string;\r\n}\r\n\r\nexport type UserDispatchType =\r\n    | UserLoading\r\n    | UserFailed\r\n    | UserSuccess\r\n    | UserLoginFailed\r\n    | UserLoggedOut\r\n    | TokenRefreshFailed\r\n    | UserProfileUpdated\r\n    | UserAccountUpdated\r\n    | UserFollowed\r\n    | UserUnfollowed\r\n    | TopicFollowed\r\n    | TopicUnfollowed\r\n    | UserProfilePictureUpdated\r\n    | UserBannerPictureUpdated;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx",["182"],"import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logoutIcon } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { logOutUser } from 'src/redux/Actions/userActions';\r\nimport './logoutModal.css';\r\n\r\nconst LogoutModal = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"logout-modal\">\r\n            <div className=\"icon-section\">{logoutIcon}</div>\r\n\r\n            <div className=\"content-section\">\r\n                <h2>Are you sure you want to log out?</h2>\r\n                <p>\r\n                    You will have to enter the credentials again before you can\r\n                    log back in.\r\n                </p>\r\n\r\n                <button\r\n                    className=\"logout-btn\"\r\n                    onClick={() => {\r\n                        dispatch(logOutUser);\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Log Out\r\n                </button>\r\n                <button\r\n                    className=\"cancel-btn\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogoutModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts",["183"],"import {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from '../Actions/applicationActionTypes';\r\n\r\ninterface DefaultApplicationStateType {\r\n    applicationTheme: string;\r\n    modal?: {\r\n        modalOpen: boolean;\r\n        modalType?: string;\r\n    };\r\n}\r\n\r\nconst defaultApplicationState: DefaultApplicationStateType = {\r\n    applicationTheme: 'light',\r\n};\r\n\r\nexport const applicationReducer = (\r\n    state: DefaultApplicationStateType = defaultApplicationState,\r\n    action: ApplicationDispatchType\r\n): DefaultApplicationStateType => {\r\n    switch (action.type) {\r\n        case MODAL_OPEN:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: true,\r\n                    modalType: action.payload.modalType,\r\n                },\r\n            };\r\n\r\n        case MODAL_CLOSE:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: false,\r\n                },\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts",["184"],"import { Dispatch } from 'redux';\r\nimport {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from './applicationActionTypes';\r\n\r\nexport const openModal = (modalType: string) => (\r\n    dispatch: Dispatch<ApplicationDispatchType>\r\n) => {\r\n    dispatch({\r\n        type: MODAL_OPEN,\r\n        payload: { modalType },\r\n    });\r\n};\r\n\r\nexport const closeModal = (dispatch: Dispatch<ApplicationDispatchType>) => {\r\n    dispatch({\r\n        type: MODAL_CLOSE,\r\n    });\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx",["185"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeIcon, loadingAnimation } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport './infoModal.css';\r\nimport TopicsInfoContainer from './TopicsInfoContainer';\r\nimport UsersInfoContainer from './UsersInfoContainer';\r\n\r\nexport interface infoUserInterface {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    profileImage: string | undefined | null;\r\n}\r\n\r\nexport interface infoTopicInterface {\r\n    topicId: number;\r\n    topicTitle: string;\r\n    topicImage: string;\r\n}\r\n\r\nconst InfoModal = ({ infoType }: { infoType: String }) => {\r\n    const currentURL = window.location.href;\r\n\r\n    const profileId = +currentURL.charAt(currentURL.length - 1);\r\n    const infoEndPoint =\r\n        infoType === 'Following'\r\n            ? `/user/getFollowing/${profileId}`\r\n            : `/user/getFollowers/${profileId}`;\r\n\r\n    const [users, setUsers] = useState<infoUserInterface[]>([]);\r\n    const [topics, setTopics] = useState<infoTopicInterface[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // current navigation of the profile modal: People | Topics\r\n    const [currentInfo, setCurrentInfo] = useState('People');\r\n\r\n    useEffect(() => {\r\n        if (currentInfo === 'People') {\r\n            // set users to empty array to avoid duplicate entries in the array = )\r\n            setUsers([]);\r\n            setLoading(true);\r\n            (async function getUsers() {\r\n                //\r\n                const res = await fetch(infoEndPoint);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.profileUsers.forEach((u: any) => {\r\n                        const newUser: infoUserInterface = {\r\n                            userId: u.user_id,\r\n                            firstName: u.first_name,\r\n                            lastName: u.last_name,\r\n                            profileImage: u.profileImage,\r\n                        };\r\n                        setUsers(users => [...users, newUser]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n        } else {\r\n            // set topics to empty array too\r\n            setTopics([]);\r\n            setLoading(true);\r\n\r\n            (async function getTopics() {\r\n                //\r\n                const res = await fetch(`/blog/getFollowingBlogs/${profileId}`);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.topics.forEach((topic: any) => {\r\n                        const newTopic: infoTopicInterface = {\r\n                            topicId: topic.topic_id,\r\n                            topicTitle: topic.topic_title,\r\n                            topicImage: topic.topic_image,\r\n                        };\r\n\r\n                        setTopics(topics => [...topics, newTopic]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n            //\r\n        }\r\n        //\r\n    }, [currentInfo]);\r\n\r\n    return (\r\n        <div className=\"info-modal\">\r\n            <span\r\n                className=\"close-modal\"\r\n                onClick={() => {\r\n                    dispatch(closeModal);\r\n                }}\r\n            >\r\n                {closeIcon}\r\n            </span>\r\n            <h3 className=\"info-title\">{infoType}</h3>\r\n\r\n            {/* Only display info navigaton when on following modal, not on follower modal */}\r\n            {infoType === 'Following' ? (\r\n                <div className=\"info-navigation\">\r\n                    <div\r\n                        className={\r\n                            'info-topic ' +\r\n                            (currentInfo === 'People' ? 'active-topic' : '')\r\n                        }\r\n                    >\r\n                        <span\r\n                            className=\"topic-title\"\r\n                            onClick={() => {\r\n                                setCurrentInfo('People');\r\n                            }}\r\n                        >\r\n                            People\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            'info-topic ' +\r\n                            (currentInfo === 'Topic' ? 'active-topic' : '')\r\n                        }\r\n                    >\r\n                        <span\r\n                            className=\"topic-title\"\r\n                            onClick={() => {\r\n                                setCurrentInfo('Topic');\r\n                            }}\r\n                        >\r\n                            Topics\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n\r\n            {/* checking which navigation is open at the moment */}\r\n            {loading ? (\r\n                <div className=\"svg-container\">\r\n                    <span className=\"loading-svg\">{loadingAnimation}</span>\r\n                </div>\r\n            ) : currentInfo === 'People' ? (\r\n                <UsersInfoContainer users={users} />\r\n            ) : (\r\n                <TopicsInfoContainer topics={topics} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":14},{"ruleId":"190","severity":1,"message":"194","line":14,"column":12,"nodeType":"192","messageId":"193","endLine":14,"endColumn":22},{"ruleId":"190","severity":1,"message":"195","line":14,"column":24,"nodeType":"192","messageId":"193","endLine":14,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":29,"column":8,"nodeType":"198","endLine":29,"endColumn":10,"suggestions":"199"},{"ruleId":"190","severity":1,"message":"200","line":13,"column":11,"nodeType":"192","messageId":"193","endLine":13,"endColumn":20},{"ruleId":"190","severity":1,"message":"201","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":22},{"ruleId":"190","severity":1,"message":"202","line":33,"column":12,"nodeType":"192","messageId":"193","endLine":33,"endColumn":22},{"ruleId":"190","severity":1,"message":"203","line":4,"column":10,"nodeType":"192","messageId":"193","endLine":4,"endColumn":14},{"ruleId":"190","severity":1,"message":"204","line":41,"column":12,"nodeType":"192","messageId":"193","endLine":41,"endColumn":26},{"ruleId":"190","severity":1,"message":"205","line":44,"column":12,"nodeType":"192","messageId":"193","endLine":44,"endColumn":25},{"ruleId":"206","severity":1,"message":"207","line":104,"column":30,"nodeType":"208","messageId":"209","endLine":104,"endColumn":32},{"ruleId":"210","severity":1,"message":"211","line":164,"column":29,"nodeType":"212","endLine":167,"endColumn":31},{"ruleId":"210","severity":1,"message":"211","line":203,"column":29,"nodeType":"212","endLine":206,"endColumn":31},{"ruleId":"210","severity":1,"message":"211","line":148,"column":21,"nodeType":"212","endLine":148,"endColumn":67},{"ruleId":"190","severity":1,"message":"213","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"214","line":1,"column":10,"nodeType":"192","messageId":"193","endLine":1,"endColumn":27},{"ruleId":"190","severity":1,"message":"215","line":40,"column":6,"nodeType":"192","messageId":"193","endLine":40,"endColumn":20},{"ruleId":"190","severity":1,"message":"216","line":12,"column":11,"nodeType":"192","messageId":"193","endLine":12,"endColumn":18},{"ruleId":"190","severity":1,"message":"217","line":4,"column":5,"nodeType":"192","messageId":"193","endLine":4,"endColumn":17},{"ruleId":"190","severity":1,"message":"217","line":5,"column":5,"nodeType":"192","messageId":"193","endLine":5,"endColumn":17},{"ruleId":"196","severity":1,"message":"218","line":91,"column":8,"nodeType":"198","endLine":91,"endColumn":21,"suggestions":"219"},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"@typescript-eslint/no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'userLogged' is assigned a value but never used.","'setUserLogged' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'userState' is assigned a value but never used.","'ModalContainer' is defined but never used.","'userExists' is assigned a value but never used.","'Link' is defined but never used.","'profilePreview' is assigned a value but never used.","'bannerPreview' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'StringMappingType' is defined but never used.","'LoginErrorType' is defined but never used.","'history' is assigned a value but never used.","'CHANGE_THEME' is defined but never used.","React Hook useEffect has missing dependencies: 'infoEndPoint' and 'profileId'. Either include them or remove the dependency array.",["223"],"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [dispatch]",{"range":"228","text":"229"},"Update the dependencies array to be: [currentInfo, infoEndPoint, profileId]",{"range":"230","text":"231"},[996,998],"[dispatch]",[3272,3285],"[currentInfo, infoEndPoint, profileId]"]