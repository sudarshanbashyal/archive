[{"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx":"1","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts":"2","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx":"3","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx":"4","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx":"6","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx":"7","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx":"8","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx":"9","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx":"10","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx":"11","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx":"12","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx":"13","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx":"14","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx":"15","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx":"16","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx":"17","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx":"18","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx":"19","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx":"20","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx":"21","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx":"22","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx":"23","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts":"24","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts":"25","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts":"26","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx":"27","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts":"28","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx":"29","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts":"30","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts":"31","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts":"32","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts":"33","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx":"34","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx":"35","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx":"36","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx":"37","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Reader.tsx":"38","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderUserInfo.tsx":"39","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderBlog.tsx":"40","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comments.tsx":"41","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderWysiwyg.tsx":"42","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comment.tsx":"43","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileNavigation\\ProfileNavigation.tsx":"44","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBookmarks\\ProfileBookmarks.tsx":"45","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileDrafts\\ProfileDrafts.tsx":"46","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\TextBlogs\\TextBlog.tsx":"47"},{"size":646,"mtime":1612687051228,"results":"48","hashOfConfig":"49"},{"size":425,"mtime":499162500000,"results":"50","hashOfConfig":"49"},{"size":1874,"mtime":1613994235581,"results":"51","hashOfConfig":"49"},{"size":1690,"mtime":1612789181126,"results":"52","hashOfConfig":"49"},{"size":3026,"mtime":1618472520989,"results":"53","hashOfConfig":"49"},{"size":1060,"mtime":1618552745698,"results":"54","hashOfConfig":"49"},{"size":1896,"mtime":1612779816302,"results":"55","hashOfConfig":"49"},{"size":2125,"mtime":1613305033267,"results":"56","hashOfConfig":"49"},{"size":1458,"mtime":1613305068939,"results":"57","hashOfConfig":"49"},{"size":1133,"mtime":1618906422039,"results":"58","hashOfConfig":"49"},{"size":9921,"mtime":1618914239437,"results":"59","hashOfConfig":"49"},{"size":1063,"mtime":1618901888483,"results":"60","hashOfConfig":"49"},{"size":3893,"mtime":1618920599289,"results":"61","hashOfConfig":"49"},{"size":2488,"mtime":1611820111455,"results":"62","hashOfConfig":"49"},{"size":11828,"mtime":1618469469696,"results":"63","hashOfConfig":"49"},{"size":6287,"mtime":1613288770738,"results":"64","hashOfConfig":"49"},{"size":214,"mtime":1611833122235,"results":"65","hashOfConfig":"49"},{"size":1235,"mtime":1618215261487,"results":"66","hashOfConfig":"49"},{"size":13096,"mtime":1613375018983,"results":"67","hashOfConfig":"49"},{"size":11029,"mtime":1618917291637,"results":"68","hashOfConfig":"49"},{"size":6626,"mtime":1618390266253,"results":"69","hashOfConfig":"49"},{"size":1955,"mtime":1618486163548,"results":"70","hashOfConfig":"49"},{"size":2372,"mtime":1618406666612,"results":"71","hashOfConfig":"49"},{"size":572,"mtime":1612706728128,"results":"72","hashOfConfig":"49"},{"size":5762,"mtime":1618920264286,"results":"73","hashOfConfig":"49"},{"size":3388,"mtime":1618920210845,"results":"74","hashOfConfig":"49"},{"size":2067,"mtime":1612707275282,"results":"75","hashOfConfig":"49"},{"size":9867,"mtime":1618920888368,"results":"76","hashOfConfig":"49"},{"size":1448,"mtime":1613303942382,"results":"77","hashOfConfig":"49"},{"size":1077,"mtime":1612706692485,"results":"78","hashOfConfig":"49"},{"size":554,"mtime":1612704922578,"results":"79","hashOfConfig":"49"},{"size":501,"mtime":1612772718647,"results":"80","hashOfConfig":"49"},{"size":708,"mtime":1613216937350,"results":"81","hashOfConfig":"49"},{"size":925,"mtime":1613304134419,"results":"82","hashOfConfig":"49"},{"size":5516,"mtime":1618473647173,"results":"83","hashOfConfig":"49"},{"size":3383,"mtime":1618473732155,"results":"84","hashOfConfig":"49"},{"size":2448,"mtime":1618301877987,"results":"85","hashOfConfig":"49"},{"size":3376,"mtime":1618824825197,"results":"86","hashOfConfig":"49"},{"size":2279,"mtime":1618818571059,"results":"87","hashOfConfig":"49"},{"size":3565,"mtime":1618824824008,"results":"88","hashOfConfig":"49"},{"size":3731,"mtime":1618831633213,"results":"89","hashOfConfig":"49"},{"size":610,"mtime":1618816043372,"results":"90","hashOfConfig":"49"},{"size":986,"mtime":1618831960646,"results":"91","hashOfConfig":"49"},{"size":1826,"mtime":1618901408634,"results":"92","hashOfConfig":"49"},{"size":2830,"mtime":1618921478726,"results":"93","hashOfConfig":"49"},{"size":191,"mtime":1618902041176,"results":"94","hashOfConfig":"49"},{"size":2058,"mtime":1618921476018,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"2hvudg",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"98"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"98"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"98"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"98"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\index.tsx",[],["205","206"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\reportWebVitals.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\App.tsx",["207","208","209","210"],"import React, { useEffect, useState } from 'react';\nimport Home from './components/Home/Home';\nimport Landing from './components/Landing/Landing';\nimport ModalContainer from './components/Modal/ModalContainer';\nimport Navbar from './components/Navbar/Navbar';\nimport './index.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStore } from './redux/store';\nimport { refreshToken } from './redux/Actions/userActions';\nimport { ToastContainer } from 'react-toastify';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [userLogged, setUserLogged] = useState(\n        localStorage.getItem('userLoggedIn')\n    );\n\n    // get user from the state\n    const userState = useSelector((state: RootStore) => state.client);\n\n    // get application state\n    const applicationState = useSelector(\n        (state: RootStore) => state.application\n    );\n\n    // request the backend for token with the cookie\n    useEffect(() => {\n        dispatch(refreshToken());\n    }, []);\n\n    //\n\n    return (\n        <div className=\"App\">\n            {/* Render Home page if the user is in the store */}\n            {userState.loading ? null : userState.client?.profile ? (\n                <Home />\n            ) : (\n                <Landing />\n            )}\n\n            {/* check is modal is open */}\n            {applicationState && applicationState.modal?.modalOpen && (\n                <ModalContainer />\n            )}\n\n            {/* toast notification container */}\n            <ToastContainer\n                position=\"bottom-center\"\n                autoClose={4000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n        </div>\n    );\n};\n\nexport default App;\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\Landing.tsx",["211"],"import React from 'react';\r\nimport './landing.css';\r\nimport typewriter from '../../assets/images/typewriter.png';\r\nimport yellowSwiggle from '../../assets/yellow-swiggle.svg';\r\nimport redSwiggle from '../../assets/red-swiggle.svg';\r\nimport whiteSwiggle from '../../assets/white-swiggle.svg';\r\nimport formSwiggle from '../../assets/form-red-swiggle.svg';\r\nimport LoginForm from './LoginForm/LoginForm';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\n\r\nconst Landing = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    return (\r\n        <div className=\"landing\">\r\n            <div className=\"image-section\">\r\n                <h3 className=\"logo-gradient\">Archive.</h3>\r\n                <img\r\n                    className=\"swiggle yellow-swiggle\"\r\n                    src={yellowSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle white-swiggle\"\r\n                    src={whiteSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n                <img\r\n                    className=\"swiggle red-swiggle\"\r\n                    src={redSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"login-section\">\r\n                <LoginForm />\r\n\r\n                <img\r\n                    className=\"swiggle form-swiggle\"\r\n                    src={formSwiggle}\r\n                    alt=\"decoration\"\r\n                />\r\n            </div>\r\n\r\n            <img className=\"typewriter\" src={typewriter} alt=\"\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Home\\Home.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Feed.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Blogs\\Blogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Feed\\Recommendations\\Recommendations.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Blog\\Blog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\Profile.tsx",["212","213"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { openModal } from 'src/redux/Actions/applicationActions';\r\nimport { followUser, unfollowUser } from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profile.css';\r\nimport ProfileBlog from './ProfileBlogs/ProfileBlog/ProfileBlog';\r\nimport ProfileBlogs from './ProfileBlogs/ProfileBlogs';\r\nimport ProfileBookmarks from './ProfileBookmarks/ProfileBookmarks';\r\nimport ProfileDrafts from './ProfileDrafts/ProfileDrafts';\r\nimport ProfileNavigation from './ProfileNavigation/ProfileNavigation';\r\n\r\ninterface ProfileInfoType {\r\n    firstName: string;\r\n    lastName: string;\r\n    interest: string;\r\n    workplace: string;\r\n    topicsFollowed: number[];\r\n    usersFollowed: number[];\r\n    userFollowers: number;\r\n    profileimage?: string | undefined;\r\n    headerimage?: string | undefined;\r\n}\r\n\r\nexport interface ProfileBlogType {\r\n    blogId: number;\r\n    title: string;\r\n    createdAt: Date;\r\n    headerImage: string;\r\n    topicTitle: string;\r\n    likes: number[];\r\n}\r\n\r\nexport const blogsType = 'blogs';\r\nexport const bookmarksType = 'bookmarks';\r\nexport const draftsType = 'drafts';\r\nexport type ProfileNavigationType =\r\n    | typeof blogsType\r\n    | typeof bookmarksType\r\n    | typeof draftsType;\r\n\r\nconst Profile = (props: any) => {\r\n    const { id: profileId } = props.match.params;\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const dispatch = useDispatch();\r\n\r\n    const [userExists, setUserExists] = useState<boolean>(true);\r\n    const [profileInfo, setProfileInfo] = useState<ProfileInfoType>({\r\n        firstName: '',\r\n        lastName: '',\r\n        interest: '',\r\n        workplace: '',\r\n        topicsFollowed: [],\r\n        usersFollowed: [],\r\n        userFollowers: 0,\r\n    });\r\n    const [profileBlogs, setProfileBlogs] = useState<ProfileBlogType[]>([]);\r\n\r\n    const [\r\n        currentProfileNavigation,\r\n        setCurrentProfileNavigation,\r\n    ] = useState<ProfileNavigationType>('blogs');\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            setProfileBlogs([]);\r\n            const res = await fetch(`/user/getUser/${profileId}`);\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                // set up profile info\r\n                let {\r\n                    first_name,\r\n                    last_name,\r\n                    interest,\r\n                    workplace,\r\n                    users_followed,\r\n                    topics_followed,\r\n                    profileimage,\r\n                    headerimage,\r\n                } = data.info[0];\r\n                setProfileInfo({\r\n                    firstName: first_name,\r\n                    lastName: last_name,\r\n                    interest,\r\n                    workplace,\r\n                    topicsFollowed: topics_followed,\r\n                    usersFollowed: users_followed,\r\n                    userFollowers: data.followers.length,\r\n                    profileimage,\r\n                    headerimage,\r\n                });\r\n\r\n                if (!data.info[0].title) {\r\n                    return;\r\n                }\r\n\r\n                // retrieve all the blogs\r\n                const retrievedBlogs = data.info.map(\r\n                    (blog: any): ProfileBlogType => {\r\n                        const {\r\n                            blog_id: blogId,\r\n                            title,\r\n                            created_at: createdAt,\r\n                            header_image: headerImage,\r\n                            topic_title: topicTitle,\r\n                            likes,\r\n                        } = blog;\r\n\r\n                        return {\r\n                            blogId,\r\n                            title,\r\n                            createdAt,\r\n                            headerImage,\r\n                            topicTitle,\r\n                            likes,\r\n                        };\r\n                    }\r\n                );\r\n\r\n                setProfileBlogs(profileBlogs => [\r\n                    ...profileBlogs,\r\n                    ...retrievedBlogs,\r\n                ]);\r\n            } else {\r\n                setUserExists(false);\r\n            }\r\n        })();\r\n    }, [profileId]);\r\n\r\n    return (\r\n        <div\r\n            className=\"profile\"\r\n            style={{\r\n                marginTop:\r\n                    profileInfo && profileInfo.headerimage ? '0px' : '50px',\r\n            }}\r\n        >\r\n            {profileInfo && profileInfo.headerimage ? (\r\n                <div className=\"header-image\">\r\n                    <img src={profileInfo.headerimage} alt=\"\" />\r\n                </div>\r\n            ) : null}\r\n\r\n            <div className=\"content-container\">\r\n                <div className=\"profile\">\r\n                    <div className=\"profile-picture\">\r\n                        <img\r\n                            src={\r\n                                profileInfo && profileInfo.profileimage\r\n                                    ? profileInfo.profileimage\r\n                                    : 'https://www.pngitem.com/pimgs/m/150-1503941_user-windows-10-user-icon-png-transparent-png.png'\r\n                            }\r\n                            alt=\"\"\r\n                        />\r\n                    </div>\r\n\r\n                    {/* check user id and display buttons accordingly */}\r\n                    {+profileId === userState.client!.profile.userId ? (\r\n                        <Link to=\"/settings\">\r\n                            <button className=\"follow-btn\">Edit Profile</button>\r\n                        </Link>\r\n                    ) : userState &&\r\n                      userState.client?.profile.usersFollowed.includes(\r\n                          +profileId\r\n                      ) ? (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    unfollowUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                    ) : (\r\n                        <button\r\n                            className=\"follow-btn\"\r\n                            onClick={() => {\r\n                                dispatch(\r\n                                    followUser(\r\n                                        +profileId,\r\n                                        userState &&\r\n                                            userState.client?.accessToken\r\n                                    )\r\n                                );\r\n                            }}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"content\">\r\n                    <div className=\"profile-info\">\r\n                        <h1 className=\"user-name\">\r\n                            {profileInfo.firstName} {profileInfo.lastName}\r\n                        </h1>\r\n                        <p className=\"related-field\">\r\n                            {profileInfo.interest} {profileInfo.workplace}\r\n                        </p>\r\n\r\n                        <div className=\"profile-stats\">\r\n                            <span\r\n                                className=\"follower-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('followers'));\r\n                                }}\r\n                            >\r\n                                <strong>{profileInfo.userFollowers}</strong>{' '}\r\n                                Followers\r\n                            </span>\r\n                            <span className=\"blog-stat\">\r\n                                <strong>{profileBlogs.length}</strong> Blogs\r\n                            </span>\r\n                            <span\r\n                                className=\"following-stat\"\r\n                                onClick={() => {\r\n                                    dispatch(openModal('following'));\r\n                                }}\r\n                            >\r\n                                <strong>\r\n                                    {profileInfo.usersFollowed.length +\r\n                                        profileInfo.topicsFollowed.length}\r\n                                </strong>{' '}\r\n                                Following\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Profile Navigation */}\r\n                    {+profileId === userState.client?.profile.userId ? (\r\n                        <ProfileNavigation\r\n                            currentProfileNavigation={currentProfileNavigation}\r\n                            setCurrentProfileNavigation={\r\n                                setCurrentProfileNavigation\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <hr />\r\n                    )}\r\n\r\n                    {currentProfileNavigation === 'blogs' ? (\r\n                        <ProfileBlogs profileBlogs={profileBlogs} />\r\n                    ) : currentProfileNavigation === 'bookmarks' ? (\r\n                        <ProfileBookmarks />\r\n                    ) : (\r\n                        <ProfileDrafts />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlogs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBlogs\\ProfileBlog\\ProfileBlog.tsx",["214"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Settings.tsx",["215"],"import React from 'react';\r\nimport ProfileSettings from './Profile/ProfileSettings';\r\nimport './settings.css';\r\nimport { Link, NavLink, Route } from 'react-router-dom';\r\nimport AccountSettings from './Account/AccountSettings';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className=\"settings\">\r\n            <h1>Settings</h1>\r\n            {/* <Link to=\"/settings/account\">account settings</Link>|\r\n            <Link to=\"/settings/\">profile settings</Link> */}\r\n            <div className=\"settings-container\">\r\n                <div className=\"setting-links\">\r\n                    <ul className=\"links\">\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/\"\r\n                            >\r\n                                Profile\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                exact={true}\r\n                                to=\"/settings/account\"\r\n                            >\r\n                                Account\r\n                            </NavLink>\r\n                        </li>\r\n\r\n                        <li className=\"link\">\r\n                            <NavLink\r\n                                className=\"inactive-link\"\r\n                                activeClassName=\"active-link\"\r\n                                to=\"/settings/about\"\r\n                            >\r\n                                About\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div className=\"setting-content\">\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/\"\r\n                        component={ProfileSettings}\r\n                    />\r\n\r\n                    <Route\r\n                        exact\r\n                        path=\"/settings/account\"\r\n                        component={AccountSettings}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Profile\\ProfileSettings.tsx",["216","217","218","219","220"],"import React, { useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    updateUserBannerImage,\r\n    updateUserProfile,\r\n    updateUserProfileImage,\r\n} from 'src/redux/Actions/userActions';\r\nimport { RootStore } from 'src/redux/store';\r\nimport './profileSettings.css';\r\n\r\nconst ProfileSettings = () => {\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const dispatch = useDispatch();\r\n\r\n    // extract the profile information from redux state\r\n    const accessToken = userState && userState.client?.accessToken;\r\n    const profile = userState && userState.client!.profile;\r\n    const [profileData, setProfileData] = useState({\r\n        firstName: profile.firstName,\r\n        lastName: profile.lastName,\r\n        interest: profile.interest,\r\n        workplace: profile.workplace,\r\n        bio: profile.bio,\r\n        profileImage: profile.profileImage,\r\n        profileHeader: profile.headerImage,\r\n    });\r\n\r\n    const handleChange = (e: any) => {\r\n        setProfileData({\r\n            ...profileData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        dispatch(updateUserProfile(profileData, accessToken!));\r\n    };\r\n\r\n    // image preview states\r\n    const [profilePreview, setProfilePreview] = useState<\r\n        string | ArrayBuffer | null | undefined | any\r\n    >(profile.profileImage);\r\n    const [bannerPreview, setBannerPreview] = useState<\r\n        string | ArrayBuffer | null | undefined | any\r\n    >(profile.headerImage);\r\n\r\n    // image preview error states\r\n    const [profileImageError, setProfileImageError] = useState<\r\n        string | null | undefined\r\n    >(null);\r\n    const [bannerImageError, setBannerImageError] = useState<\r\n        string | null | undefined\r\n    >(null);\r\n\r\n    // input file references\r\n    const profileUpload = useRef<any>(null);\r\n    const bannerUpload = useRef<any>(null);\r\n\r\n    // takes either profileUpload or bannerUpload reference object\r\n    const openImageUploader = (uploader: React.MutableRefObject<any>) => {\r\n        uploader.current!.click();\r\n    };\r\n\r\n    /**\r\n     * Handles ImageUpload preview for both the profile and the banner.\r\n     * @param previewState - Takes in useState object as the parameter. Determines which state it is that need to preview the image uploaded.\r\n     * @param errorState -  Takes in useState object as the parameter. Determines which state it is that needs to hold the error returned by image uploader.\r\n     */\r\n    const handleFileInputChange = (\r\n        e: any,\r\n        previewState: React.Dispatch<\r\n            React.SetStateAction<string | ArrayBuffer | null | undefined>\r\n        >,\r\n        errorState: React.Dispatch<\r\n            React.SetStateAction<string | null | undefined>\r\n        >\r\n    ) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                errorState('The uploaded file must be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                errorState('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            uploadImage(file, previewState);\r\n            errorState(null);\r\n        }\r\n    };\r\n\r\n    const uploadImage = (\r\n        file: Blob,\r\n        previewState: React.Dispatch<\r\n            React.SetStateAction<string | ArrayBuffer | null | undefined>\r\n        >\r\n    ) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            // previewState(reader.result);\r\n            if (previewState == setProfilePreview) {\r\n                dispatch(updateUserProfileImage(reader.result, accessToken));\r\n            } else {\r\n                dispatch(updateUserBannerImage(reader.result, accessToken));\r\n            }\r\n        };\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-settings\">\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">theme</h2>\r\n                <p className=\"section-description\">\r\n                    Select a theme for you application. Your preference will be\r\n                    saved automatically.\r\n                </p>\r\n\r\n                <div className=\"themes\">\r\n                    <div className=\"theme light-theme\">\r\n                        <span>Light</span>\r\n                    </div>\r\n                    <div className=\"theme dark-theme\">\r\n                        <span>Dark</span>\r\n                    </div>\r\n                    <div className=\"theme high-contrast\">\r\n                        <span>High Contrast</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* profile image */}\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">your profile</h2>\r\n                <p className=\"section-description\">Profile Picture</p>\r\n                <div className=\"profile-pictures\">\r\n                    <div\r\n                        className=\"change-profile\"\r\n                        onClick={() => {\r\n                            openImageUploader(profileUpload);\r\n                        }}\r\n                    >\r\n                        <span>Click here to change your profile</span>\r\n                    </div>\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"profileImage\"\r\n                        ref={profileUpload}\r\n                        style={{ display: 'none' }}\r\n                        onChange={e => {\r\n                            handleFileInputChange(\r\n                                e,\r\n                                setProfilePreview,\r\n                                setProfileImageError\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* checking if profile picture has been uploaded */}\r\n                    {profileData.profileImage ? (\r\n                        <div className=\"profile\">\r\n                            <img\r\n                                src={profileData.profileImage}\r\n                                alt=\"profile image\"\r\n                            />\r\n                        </div>\r\n                    ) : null}\r\n\r\n                    <strong className=\"error-message\">\r\n                        {profileImageError}\r\n                    </strong>\r\n                </div>\r\n\r\n                {/* header image */}\r\n                <p className=\"section-description\">Header Image</p>\r\n                <div className=\"header-images\">\r\n                    <div\r\n                        className=\"change-header\"\r\n                        onClick={() => {\r\n                            openImageUploader(bannerUpload);\r\n                        }}\r\n                    >\r\n                        Click here to change your header\r\n                    </div>\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"bannerImage\"\r\n                        ref={bannerUpload}\r\n                        style={{ display: 'none' }}\r\n                        onChange={e => {\r\n                            handleFileInputChange(\r\n                                e,\r\n                                setBannerPreview,\r\n                                setBannerImageError\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* checking if banner image has been uploaded */}\r\n                    {profileData.profileHeader ? (\r\n                        <div className=\"header\">\r\n                            <img\r\n                                src={profileData.profileHeader}\r\n                                alt=\"banner image\"\r\n                            />\r\n                        </div>\r\n                    ) : null}\r\n\r\n                    <strong className=\"error-message\">\r\n                        {bannerImageError}\r\n                    </strong>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"setting-section\">\r\n                <h2 className=\"section-title\">about you</h2>\r\n\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"name-input\" className=\"section-description\">\r\n                        First Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"name-input\"\r\n                        placeholder=\"Your First Name\"\r\n                        value={profileData.firstName}\r\n                        name=\"firstName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"last-name-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Last Name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"last-name-input\"\r\n                        placeholder=\"Your Last Name\"\r\n                        value={profileData.lastName}\r\n                        name=\"lastName\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"interest-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Interest/ Education\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"What do you do?/ What are you interested in?\"\r\n                        value={profileData.interest}\r\n                        name=\"interest\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label\r\n                        htmlFor=\"workplace-input\"\r\n                        className=\"section-description\"\r\n                    >\r\n                        Workplace\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"interest-input\"\r\n                        placeholder=\"Where do you work?\"\r\n                        value={profileData.workplace}\r\n                        name=\"workplace\"\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <label htmlFor=\"bio-input\" className=\"section-description\">\r\n                        Bio\r\n                    </label>\r\n                    <textarea\r\n                        className=\"bio-input\"\r\n                        id=\"\"\r\n                        cols={30}\r\n                        rows={5}\r\n                        placeholder=\"Write something about yourself\"\r\n                        value={profileData.bio}\r\n                        name=\"bio\"\r\n                        onChange={handleChange}\r\n                    ></textarea>\r\n                    <p\r\n                        style={{\r\n                            color:\r\n                                profileData.bio.length >= 200\r\n                                    ? '#dd3b40'\r\n                                    : 'black',\r\n                        }}\r\n                        className=\"bio-length\"\r\n                    >\r\n                        {profileData.bio.length}/200\r\n                    </p>\r\n\r\n                    <button\r\n                        className=\"save-btn\"\r\n                        disabled={profileData.bio.length > 200}\r\n                    >\r\n                        Save Changes\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileSettings;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Settings\\Account\\AccountSettings.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Explore\\Explore.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ModalContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\RegisterModal\\RegisterModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\assets\\SVGs.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\EditorPage.tsx",["221"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RootStore } from 'src/redux/store';\r\nimport { showSuccessToast } from '../Utils/ToastNotification';\r\nimport './editor.css';\r\nimport Wysiwyg from './Wysiwyg/Wysiwyg';\r\n\r\nconst EditorPage = () => {\r\n    const history = useHistory();\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    //\r\n    const [blogTitle, setBlogTitle] = useState<string | null>(null);\r\n    const [blogTopics, setBlogTopics] = useState<\r\n        Array<{ topic_id: number; topic_image: string; topic_title: string }>\r\n    >([]);\r\n    const [selectedTopic, setSelectedTopic] = useState<number | null>(null);\r\n\r\n    // image preview and error\r\n    const imageUpload = useRef<any>(null);\r\n\r\n    const [previewSource, setPreviewSource] = useState<any>(null);\r\n    const [imageError, setImageError] = useState<string | null>(null);\r\n\r\n    // editor state, onchange functions\r\n    const [editorHTML, setEditorHTML] = useState();\r\n    const [editorError, setEditorError] = useState<string | null>(null);\r\n\r\n    // image uploader and previewer\r\n    const openFileUploader = (): void => {\r\n        imageUpload.current!.click();\r\n    };\r\n\r\n    const handleFileInputChange = (e: any): void => {\r\n        const file = e.target.files![0];\r\n        if (file) {\r\n            if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\r\n                setImageError('The uploaded file has to be an image.');\r\n                return;\r\n            }\r\n            if (file.size > 1000000) {\r\n                setImageError('The image must be under 1MB.');\r\n                return;\r\n            }\r\n            setImageError(null);\r\n            previewImage(file);\r\n        }\r\n    };\r\n\r\n    const previewImage = (file: Blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const removePreviewImage = () => {\r\n        setPreviewSource(null);\r\n    };\r\n\r\n    // blog submission and validation\r\n    const handleSubmit = () => {\r\n        if (!blogTitle) {\r\n            setEditorError('Your blog must have a title.');\r\n        } else if (!previewSource) {\r\n            setEditorError('You must upload an image.');\r\n        } else if (!selectedTopic) {\r\n            setEditorError('You must select a topic.');\r\n        } else if (!editorHTML) {\r\n            setEditorError('Your blog cannot be empty.');\r\n        } else {\r\n            setEditorError(null);\r\n            // dispatch(openModal('uploadBlog'));\r\n\r\n            // upload the blog\r\n            uploadBlog();\r\n        }\r\n    };\r\n\r\n    const uploadBlog = async () => {\r\n        const blogData = {\r\n            blogTitle,\r\n            blogContent: editorHTML,\r\n            topicId: selectedTopic,\r\n            encodedImage: previewSource,\r\n        };\r\n\r\n        const res = await fetch('blog/postBlog', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                authorization: `bearer ${\r\n                    userState && userState.client?.accessToken\r\n                }`,\r\n            },\r\n            body: JSON.stringify(blogData),\r\n        });\r\n\r\n        const data = await res.json();\r\n        if (data.ok) {\r\n            showSuccessToast('Blog Successfully Published.');\r\n            history.push(\r\n                `/user/${userState && userState.client?.profile.userId}`\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const res = await fetch('blog/getTopics');\r\n            const data = await res.json();\r\n            setBlogTopics(data.data);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"editor-page\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"story-title\"\r\n                placeholder=\"Title your Story...\"\r\n                onChange={e => {\r\n                    setBlogTitle(e.target.value);\r\n                }}\r\n            />\r\n\r\n            <input\r\n                type=\"file\"\r\n                name=\"image\"\r\n                ref={imageUpload}\r\n                style={{ display: 'none' }}\r\n                onChange={handleFileInputChange}\r\n            />\r\n\r\n            {previewSource ? (\r\n                <div className=\"header-image\">\r\n                    <svg\r\n                        onClick={removePreviewImage}\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                    >\r\n                        <path d=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\" />\r\n                    </svg>\r\n                    <img src={previewSource} alt=\"Header Image\" />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div\r\n                        className=\"header-image-placeholder\"\r\n                        onClick={openFileUploader}\r\n                    >\r\n                        <p>Click here to upload a header.</p>\r\n                    </div>\r\n                    <p className=\"error-message\">{imageError && imageError}</p>\r\n                </div>\r\n            )}\r\n\r\n            <label className=\"topic-label\" htmlFor=\"blog-topic\">\r\n                Select a topic for your blog:{' '}\r\n            </label>\r\n            <select\r\n                id=\"blog-topic\"\r\n                onChange={(e: any) => {\r\n                    setSelectedTopic(+e.target.value);\r\n                }}\r\n            >\r\n                <option id=\"blog-option\" selected disabled>\r\n                    Select a topic\r\n                </option>\r\n                {blogTopics.map(topic => (\r\n                    <option key={topic.topic_id} value={topic.topic_id}>\r\n                        {topic.topic_title}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n\r\n            <p className=\"error-message\">{editorError && editorError}</p>\r\n\r\n            <Wysiwyg\r\n                setEditorHTML={setEditorHTML}\r\n                editorHTML={editorHTML}\r\n                handleSubmit={handleSubmit}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Editor\\Wysiwyg\\Wysiwyg.tsx",["222"],"import React, { useState } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst Wysiwyg = ({ setEditorHTML, editorHTML, handleSubmit }: any) => {\r\n    // const [editorHTML, setEditorHTML] = useState('');\r\n\r\n    const handleEditorChange = (html: string) => {\r\n        setEditorHTML(html);\r\n    };\r\n\r\n    const modules = {\r\n        toolbar: [\r\n            [{ header: '1' }, { header: '2' }, { font: [] }],\r\n            [{ size: [] }],\r\n            ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n            [\r\n                { list: 'ordered' },\r\n                { list: 'bullet' },\r\n                { indent: '-1' },\r\n                { indent: '+1' },\r\n            ],\r\n            ['link', 'image', 'video'],\r\n            ['clean'],\r\n        ],\r\n        clipboard: {\r\n            matchVisual: false,\r\n        },\r\n    };\r\n\r\n    const formats = [\r\n        'header',\r\n        'font',\r\n        'size',\r\n        'bold',\r\n        'italic',\r\n        'underline',\r\n        'strike',\r\n        'blockquote',\r\n        'list',\r\n        'bullet',\r\n        'indent',\r\n        'link',\r\n        'image',\r\n        'video',\r\n    ];\r\n\r\n    return (\r\n        <div className=\"Wysiwyg\">\r\n            <ReactQuill\r\n                className=\"actual-editor\"\r\n                theme=\"snow\"\r\n                value={editorHTML || ''}\r\n                onChange={handleEditorChange}\r\n                modules={modules}\r\n                formats={formats}\r\n                placeholder=\"Start Sharing...\"\r\n                bounds=\".app\"\r\n            />\r\n\r\n            <div className=\"editor-controls\">\r\n                <button className=\"draft-btn\">Save as draft</button>\r\n                <button className=\"publish-btn\" onClick={handleSubmit}>\r\n                    Publish Story\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wysiwyg;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Navbar\\Dropdown\\Dropdown.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\store.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\userReducer.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActionTypes.ts",["223","224"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Landing\\LoginForm\\LoginForm.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\userActions.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\LogoutModal\\LogoutModal.tsx",["225"],"import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logoutIcon } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport { logOutUser } from 'src/redux/Actions/userActions';\r\nimport './logoutModal.css';\r\n\r\nconst LogoutModal = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"logout-modal\">\r\n            <div className=\"icon-section\">{logoutIcon}</div>\r\n\r\n            <div className=\"content-section\">\r\n                <h2>Are you sure you want to log out?</h2>\r\n                <p>\r\n                    You will have to enter the credentials again before you can\r\n                    log back in.\r\n                </p>\r\n\r\n                <button\r\n                    className=\"logout-btn\"\r\n                    onClick={() => {\r\n                        dispatch(logOutUser);\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Log Out\r\n                </button>\r\n                <button\r\n                    className=\"cancel-btn\"\r\n                    onClick={() => {\r\n                        dispatch(closeModal);\r\n                    }}\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogoutModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Reducers\\applicationReducer.ts",["226"],"import {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from '../Actions/applicationActionTypes';\r\n\r\ninterface DefaultApplicationStateType {\r\n    applicationTheme: string;\r\n    modal?: {\r\n        modalOpen: boolean;\r\n        modalType?: string;\r\n    };\r\n}\r\n\r\nconst defaultApplicationState: DefaultApplicationStateType = {\r\n    applicationTheme: 'light',\r\n};\r\n\r\nexport const applicationReducer = (\r\n    state: DefaultApplicationStateType = defaultApplicationState,\r\n    action: ApplicationDispatchType\r\n): DefaultApplicationStateType => {\r\n    switch (action.type) {\r\n        case MODAL_OPEN:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: true,\r\n                    modalType: action.payload.modalType,\r\n                },\r\n            };\r\n\r\n        case MODAL_CLOSE:\r\n            return {\r\n                ...state,\r\n                modal: {\r\n                    modalOpen: false,\r\n                },\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActionTypes.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\redux\\Actions\\applicationActions.ts",["227"],"import { Dispatch } from 'redux';\r\nimport {\r\n    MODAL_CLOSE,\r\n    MODAL_OPEN,\r\n    CHANGE_THEME,\r\n    ApplicationDispatchType,\r\n} from './applicationActionTypes';\r\n\r\nexport const openModal = (modalType: string) => (\r\n    dispatch: Dispatch<ApplicationDispatchType>\r\n) => {\r\n    dispatch({\r\n        type: MODAL_OPEN,\r\n        payload: { modalType },\r\n    });\r\n};\r\n\r\nexport const closeModal = (dispatch: Dispatch<ApplicationDispatchType>) => {\r\n    dispatch({\r\n        type: MODAL_CLOSE,\r\n    });\r\n};\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Utils\\ToastNotification.ts",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\ConfirmModal\\ConfirmModal.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\InfoModal.tsx",["228"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { closeIcon, loadingAnimation } from 'src/assets/SVGs';\r\nimport { closeModal } from 'src/redux/Actions/applicationActions';\r\nimport './infoModal.css';\r\nimport TopicsInfoContainer from './TopicsInfoContainer';\r\nimport UsersInfoContainer from './UsersInfoContainer';\r\n\r\nexport interface infoUserInterface {\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    profileImage: string | undefined | null;\r\n}\r\n\r\nexport interface infoTopicInterface {\r\n    topicId: number;\r\n    topicTitle: string;\r\n    topicImage: string;\r\n}\r\n\r\nconst InfoModal = ({ infoType }: { infoType: String }) => {\r\n    const currentURL = window.location.href;\r\n\r\n    const profileId = +currentURL.charAt(currentURL.length - 1);\r\n    const infoEndPoint =\r\n        infoType === 'Following'\r\n            ? `/user/getFollowing/${profileId}`\r\n            : `/user/getFollowers/${profileId}`;\r\n\r\n    const [users, setUsers] = useState<infoUserInterface[]>([]);\r\n    const [topics, setTopics] = useState<infoTopicInterface[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // current navigation of the profile modal: People | Topics\r\n    const [currentInfo, setCurrentInfo] = useState('People');\r\n\r\n    useEffect(() => {\r\n        if (currentInfo === 'People') {\r\n            // set users to empty array to avoid duplicate entries in the array = )\r\n            setUsers([]);\r\n            setLoading(true);\r\n            (async function getUsers() {\r\n                //\r\n                const res = await fetch(infoEndPoint);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.profileUsers.forEach((u: any) => {\r\n                        const newUser: infoUserInterface = {\r\n                            userId: u.user_id,\r\n                            firstName: u.first_name,\r\n                            lastName: u.last_name,\r\n                            profileImage: u.profileimage,\r\n                        };\r\n                        setUsers(users => [...users, newUser]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n        } else {\r\n            // set topics to empty array too\r\n            setTopics([]);\r\n            setLoading(true);\r\n\r\n            (async function getTopics() {\r\n                //\r\n                const res = await fetch(`/blog/getFollowingBlogs/${profileId}`);\r\n                const data = await res.json();\r\n\r\n                if (data.ok) {\r\n                    data.topics.forEach((topic: any) => {\r\n                        const newTopic: infoTopicInterface = {\r\n                            topicId: topic.topic_id,\r\n                            topicTitle: topic.topic_title,\r\n                            topicImage: topic.topic_image,\r\n                        };\r\n\r\n                        setTopics(topics => [...topics, newTopic]);\r\n                    });\r\n                    setLoading(false);\r\n                } else setLoading(false);\r\n                //\r\n            })();\r\n            //\r\n        }\r\n        //\r\n    }, [currentInfo]);\r\n\r\n    return (\r\n        <div className=\"info-modal\">\r\n            <span\r\n                className=\"close-modal\"\r\n                onClick={() => {\r\n                    dispatch(closeModal);\r\n                }}\r\n            >\r\n                {closeIcon}\r\n            </span>\r\n            <h3 className=\"info-title\">{infoType}</h3>\r\n\r\n            {/* Only display info navigaton when on following modal, not on follower modal */}\r\n            {infoType === 'Following' ? (\r\n                <div className=\"info-navigation\">\r\n                    <div\r\n                        className={\r\n                            'info-topic ' +\r\n                            (currentInfo === 'People' ? 'active-topic' : '')\r\n                        }\r\n                    >\r\n                        <span\r\n                            className=\"topic-title\"\r\n                            onClick={() => {\r\n                                setCurrentInfo('People');\r\n                            }}\r\n                        >\r\n                            People\r\n                        </span>\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            'info-topic ' +\r\n                            (currentInfo === 'Topic' ? 'active-topic' : '')\r\n                        }\r\n                    >\r\n                        <span\r\n                            className=\"topic-title\"\r\n                            onClick={() => {\r\n                                setCurrentInfo('Topic');\r\n                            }}\r\n                        >\r\n                            Topics\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n\r\n            {/* checking which navigation is open at the moment */}\r\n            {loading ? (\r\n                <div className=\"svg-container\">\r\n                    <span className=\"loading-svg\">{loadingAnimation}</span>\r\n                </div>\r\n            ) : currentInfo === 'People' ? (\r\n                <UsersInfoContainer users={users} />\r\n            ) : (\r\n                <TopicsInfoContainer topics={topics} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoModal;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\UsersInfoContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Modal\\InfoModal\\TopicsInfoContainer.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Reader.tsx",["229"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootStore } from 'src/redux/store';\r\nimport Comments from './Comments/Comments';\r\nimport './reader.css';\r\nimport ReaderBlog from './ReaderBlog';\r\nimport ReaderUserInfo from './ReaderUserInfo';\r\n\r\ninterface blogInterface {\r\n    title: string;\r\n    blogContent: string;\r\n    headerImage: string;\r\n    createdAt: string;\r\n    likes: number[] | null;\r\n    userId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    profileImage: string | null;\r\n    interest: string | null;\r\n}\r\n\r\nconst Reader = (props: any) => {\r\n    const { id: blogId } = props.match.params;\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n\r\n    const [blog, setBlog] = useState<blogInterface | null>();\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n    const [commentExpanded, setCommentExpanded] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        (async function getBlog() {\r\n            const res = await fetch(`/blog/getBlog/${blogId}`);\r\n            if (res.status === 404) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            const data = await res.json();\r\n            if (data.ok) {\r\n                const responseBlog = data.blog;\r\n                setBlog({\r\n                    title: responseBlog.title,\r\n                    blogContent: responseBlog.blog_content,\r\n                    headerImage: responseBlog.header_image,\r\n                    createdAt: responseBlog.created_at,\r\n                    likes: responseBlog.likes,\r\n                    userId: responseBlog.user_id,\r\n                    firstName: responseBlog.first_name,\r\n                    lastName: responseBlog.last_name,\r\n                    profileImage: responseBlog.profileimage,\r\n                    interest: responseBlog.interest,\r\n                });\r\n                setLoading(false);\r\n            }\r\n\r\n            //\r\n        })();\r\n    }, []);\r\n\r\n    return loading ? (\r\n        <div>Loading</div>\r\n    ) : !loading && !blog ? (\r\n        <div>no blog found</div>\r\n    ) : (\r\n        <div className=\"container\">\r\n            <div className=\"blog-container\">\r\n                {userState &&\r\n                userState.client?.profile.userId !== blog?.userId ? (\r\n                    <ReaderUserInfo\r\n                        userId={blog!.userId}\r\n                        firstName={blog!.firstName}\r\n                        lastName={blog!.lastName}\r\n                        interest={blog!.interest}\r\n                        profileImage={blog!.profileImage}\r\n                    />\r\n                ) : null}\r\n\r\n                <ReaderBlog\r\n                    blogId={blogId}\r\n                    title={blog!.title}\r\n                    blogContent={blog!.blogContent}\r\n                    headerImage={blog!.headerImage}\r\n                    createdAt={blog!.createdAt}\r\n                    likes={blog!.likes}\r\n                    setCommentExpanded={setCommentExpanded}\r\n                    commentExpanded={commentExpanded}\r\n                />\r\n            </div>\r\n\r\n            <Comments\r\n                blogId={blogId}\r\n                commentExpanded={commentExpanded}\r\n                setCommentExpanded={setCommentExpanded}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Reader;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderUserInfo.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderBlog.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comments.tsx",["230","231"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { closeIcon, pencilIcon } from 'src/assets/SVGs';\r\nimport { RootStore } from 'src/redux/store';\r\nimport Comment from './Comment';\r\nimport './comments.css';\r\n\r\ninterface readerCommentInterface {\r\n    blogId: number;\r\n    commentExpanded: boolean;\r\n    setCommentExpanded: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport interface commentInterface {\r\n    userId: number;\r\n    profileImage: string | null;\r\n    firstName: string;\r\n    lastName: string;\r\n    commentId: number;\r\n    commentContent: string;\r\n    likedBy: number[] | null;\r\n}\r\n\r\nconst Comments = ({\r\n    blogId,\r\n    commentExpanded,\r\n    setCommentExpanded,\r\n}: readerCommentInterface) => {\r\n    //\r\n    const [currentComment, setCurrentComment] = useState<string>('');\r\n    const [blogComments, setBlogComments] = useState<commentInterface[]>([]);\r\n\r\n    const userState = useSelector((state: RootStore) => state.client);\r\n    const accessToken = userState.client?.accessToken;\r\n\r\n    const submitComment = async (e: any) => {\r\n        e.preventDefault();\r\n\r\n        const res = await fetch(`/blog/postComment/${blogId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: `bearer ${accessToken}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                commentContent: currentComment,\r\n            }),\r\n        });\r\n        const data = await res.json();\r\n        console.log(data);\r\n\r\n        setCurrentComment('');\r\n    };\r\n\r\n    useEffect(() => {\r\n        setBlogComments([]);\r\n\r\n        (async function getComments() {\r\n            const res = await fetch(`/blog/getComments/${blogId}`);\r\n            const data = await res.json();\r\n\r\n            if (data.ok) {\r\n                data.comments.map((comment: any) => {\r\n                    setBlogComments(blogComments => [\r\n                        {\r\n                            userId: comment.user_id,\r\n                            profileImage: comment.profileimage,\r\n                            firstName: comment.first_name,\r\n                            lastName: comment.last_name,\r\n                            commentId: comment.comment_id,\r\n                            commentContent: comment.comment_content,\r\n                            likedBy: comment.liked_by,\r\n                        },\r\n                        ...blogComments,\r\n                    ]);\r\n                });\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'comments-container ' +\r\n                (commentExpanded && ' expanded-comment-container')\r\n            }\r\n        >\r\n            <span\r\n                className=\"close-icon\"\r\n                onClick={() => {\r\n                    setCommentExpanded(false);\r\n                }}\r\n            >\r\n                {closeIcon}\r\n            </span>\r\n\r\n            <div className=\"comment-box\">\r\n                <form onSubmit={submitComment}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Add a comment\"\r\n                        onChange={e => {\r\n                            setCurrentComment(e.target.value);\r\n                        }}\r\n                        value={currentComment}\r\n                    />\r\n                </form>\r\n\r\n                <span onClick={submitComment}>{pencilIcon}</span>\r\n            </div>\r\n\r\n            {blogComments.map(com => (\r\n                <Comment key={com.commentId} comment={com} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\ReaderWysiwyg.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Reader\\Comments\\Comment.tsx",["232"],"import React from 'react';\r\nimport { commentInterface } from './Comments';\r\n\r\nconst Comment = ({ comment }: { comment: commentInterface }) => {\r\n    return (\r\n        <div className=\"comment\">\r\n            <div className=\"comment-user-info\">\r\n                <div className=\"user-profile\">\r\n                    <img\r\n                        src={\r\n                            comment.profileImage\r\n                                ? comment.profileImage\r\n                                : 'https://www.pngitem.com/pimgs/m/150-1503941_user-windows-10-user-icon-png-transparent-png.png'\r\n                        }\r\n                        alt=\"user-profile-image\"\r\n                    />\r\n                </div>\r\n                <p className=\"user-name\">\r\n                    {comment.firstName} {comment.lastName}\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"comment-body\">{comment.commentContent}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n","D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileNavigation\\ProfileNavigation.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileBookmarks\\ProfileBookmarks.tsx",["233","234","235"],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\ProfileDrafts\\ProfileDrafts.tsx",[],"D:\\.hi\\20\\js\\React\\archive-project\\client\\src\\components\\Profile\\TextBlogs\\TextBlog.tsx",["236"],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":5,"column":8,"nodeType":"243","messageId":"244","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"245","line":14,"column":12,"nodeType":"243","messageId":"244","endLine":14,"endColumn":22},{"ruleId":"241","severity":1,"message":"246","line":14,"column":24,"nodeType":"243","messageId":"244","endLine":14,"endColumn":37},{"ruleId":"247","severity":1,"message":"248","line":29,"column":8,"nodeType":"249","endLine":29,"endColumn":10,"suggestions":"250"},{"ruleId":"241","severity":1,"message":"251","line":13,"column":11,"nodeType":"243","messageId":"244","endLine":13,"endColumn":20},{"ruleId":"241","severity":1,"message":"252","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":19},{"ruleId":"241","severity":1,"message":"253","line":48,"column":12,"nodeType":"243","messageId":"244","endLine":48,"endColumn":22},{"ruleId":"241","severity":1,"message":"254","line":13,"column":10,"nodeType":"243","messageId":"244","endLine":13,"endColumn":15},{"ruleId":"241","severity":1,"message":"255","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":14},{"ruleId":"241","severity":1,"message":"256","line":41,"column":12,"nodeType":"243","messageId":"244","endLine":41,"endColumn":26},{"ruleId":"241","severity":1,"message":"257","line":44,"column":12,"nodeType":"243","messageId":"244","endLine":44,"endColumn":25},{"ruleId":"258","severity":1,"message":"259","line":104,"column":30,"nodeType":"260","messageId":"261","endLine":104,"endColumn":32},{"ruleId":"262","severity":1,"message":"263","line":164,"column":29,"nodeType":"264","endLine":167,"endColumn":31},{"ruleId":"262","severity":1,"message":"263","line":203,"column":29,"nodeType":"264","endLine":206,"endColumn":31},{"ruleId":"262","severity":1,"message":"263","line":148,"column":21,"nodeType":"264","endLine":148,"endColumn":67},{"ruleId":"241","severity":1,"message":"265","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"266","line":1,"column":10,"nodeType":"243","messageId":"244","endLine":1,"endColumn":27},{"ruleId":"241","severity":1,"message":"267","line":42,"column":6,"nodeType":"243","messageId":"244","endLine":42,"endColumn":20},{"ruleId":"241","severity":1,"message":"268","line":12,"column":11,"nodeType":"243","messageId":"244","endLine":12,"endColumn":18},{"ruleId":"241","severity":1,"message":"269","line":4,"column":5,"nodeType":"243","messageId":"244","endLine":4,"endColumn":17},{"ruleId":"241","severity":1,"message":"269","line":5,"column":5,"nodeType":"243","messageId":"244","endLine":5,"endColumn":17},{"ruleId":"247","severity":1,"message":"270","line":91,"column":8,"nodeType":"249","endLine":91,"endColumn":21,"suggestions":"271"},{"ruleId":"247","severity":1,"message":"272","line":60,"column":8,"nodeType":"249","endLine":60,"endColumn":10,"suggestions":"273"},{"ruleId":"274","severity":1,"message":"275","line":64,"column":50,"nodeType":"276","messageId":"277","endLine":64,"endColumn":52},{"ruleId":"247","severity":1,"message":"272","line":80,"column":8,"nodeType":"249","endLine":80,"endColumn":10,"suggestions":"278"},{"ruleId":"262","severity":1,"message":"263","line":9,"column":21,"nodeType":"264","endLine":16,"endColumn":23},{"ruleId":"274","severity":1,"message":"275","line":38,"column":52,"nodeType":"276","messageId":"277","endLine":38,"endColumn":54},{"ruleId":"247","severity":1,"message":"279","line":58,"column":8,"nodeType":"249","endLine":58,"endColumn":58,"suggestions":"280"},{"ruleId":"247","severity":1,"message":"281","line":58,"column":9,"nodeType":"282","endLine":58,"endColumn":57},{"ruleId":"283","severity":1,"message":"284","line":25,"column":21,"nodeType":"264","endLine":25,"endColumn":76},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"@typescript-eslint/no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'userLogged' is assigned a value but never used.","'setUserLogged' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["287"],"'userState' is assigned a value but never used.","'ProfileBlog' is defined but never used.","'userExists' is assigned a value but never used.","'spawn' is defined but never used.","'Link' is defined but never used.","'profilePreview' is assigned a value but never used.","'bannerPreview' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'StringMappingType' is defined but never used.","'LoginErrorType' is defined but never used.","'history' is assigned a value but never used.","'CHANGE_THEME' is defined but never used.","React Hook useEffect has missing dependencies: 'infoEndPoint' and 'profileId'. Either include them or remove the dependency array.",["288"],"React Hook useEffect has a missing dependency: 'blogId'. Either include it or remove the dependency array.",["289"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["290"],"React Hook useEffect has a missing dependency: 'userState'. Either include it or remove the dependency array.",["291"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"296","fix":"298"},{"desc":"299","fix":"300"},"Update the dependencies array to be: [dispatch]",{"range":"301","text":"302"},"Update the dependencies array to be: [currentInfo, infoEndPoint, profileId]",{"range":"303","text":"304"},"Update the dependencies array to be: [blogId]",{"range":"305","text":"306"},{"range":"307","text":"306"},"Update the dependencies array to be: [userState]",{"range":"308","text":"309"},[996,998],"[dispatch]",[3272,3285],"[currentInfo, infoEndPoint, profileId]",[2009,2011],"[blogId]",[2599,2601],[2000,2050],"[userState]"]